// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unmarshaler/omitempty.proto

package omitempty

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OmitEmpty struct {
	InnerNullable        *OmitEmpty_Inner `protobuf:"bytes,1,opt,name=InnerNullable" json:"InnerNullable,omitempty"`
	InnerNotNullable     OmitEmpty_Inner  `protobuf:"bytes,2,opt,name=InnerNotNullable" json:"InnerNotNullable"`
	InnerOmitEmpty       OmitEmpty_Inner  `protobuf:"bytes,3,opt,name=InnerOmitEmpty" json:"InnerOmitEmpty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OmitEmpty) Reset()      { *m = OmitEmpty{} }
func (*OmitEmpty) ProtoMessage() {}
func (*OmitEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_481a4f0a61bd5939, []int{0}
}
func (m *OmitEmpty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OmitEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OmitEmpty.Marshal(b, m, deterministic)
}
func (m *OmitEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmitEmpty.Merge(m, src)
}
func (m *OmitEmpty) XXX_Size() int {
	return xxx_messageInfo_OmitEmpty.Size(m)
}
func (m *OmitEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_OmitEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_OmitEmpty proto.InternalMessageInfo

type OmitEmpty_Inner struct {
	Foo                  int64    `protobuf:"varint,1,opt,name=Foo" json:"Foo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OmitEmpty_Inner) Reset()      { *m = OmitEmpty_Inner{} }
func (*OmitEmpty_Inner) ProtoMessage() {}
func (*OmitEmpty_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_481a4f0a61bd5939, []int{0, 0}
}
func (m *OmitEmpty_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OmitEmpty_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OmitEmpty_Inner.Marshal(b, m, deterministic)
}
func (m *OmitEmpty_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmitEmpty_Inner.Merge(m, src)
}
func (m *OmitEmpty_Inner) XXX_Size() int {
	return xxx_messageInfo_OmitEmpty_Inner.Size(m)
}
func (m *OmitEmpty_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_OmitEmpty_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_OmitEmpty_Inner proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OmitEmpty)(nil), "omitempty.OmitEmpty")
	proto.RegisterType((*OmitEmpty_Inner)(nil), "omitempty.OmitEmpty.Inner")
}

func init() {
	proto.RegisterFile("combos/unmarshaler/omitempty.proto", fileDescriptor_481a4f0a61bd5939)
}

var fileDescriptor_481a4f0a61bd5939 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0xef, 0xb5, 0x0a, 0xf6, 0x44, 0x91, 0x0c, 0x52, 0x3a, 0xbc, 0x4a, 0x27, 0x17, 0x13,
	0xf0, 0x13, 0x48, 0x41, 0x41, 0x08, 0x0a, 0xf9, 0x06, 0x49, 0x89, 0x69, 0x20, 0x97, 0x57, 0xd2,
	0xcb, 0xe0, 0xd6, 0xd9, 0x4f, 0xd2, 0xd1, 0xd1, 0xd1, 0x31, 0x63, 0x47, 0x27, 0xed, 0x3d, 0x97,
	0x8e, 0x1d, 0x3b, 0x4a, 0xae, 0x12, 0x51, 0x87, 0x6e, 0xf7, 0x7e, 0xfc, 0x7f, 0xff, 0x3f, 0x27,
	0x07, 0x23, 0x52, 0x11, 0x4d, 0xbd, 0x32, 0x57, 0x61, 0x31, 0x1d, 0x87, 0x59, 0x5c, 0x78, 0xa4,
	0x52, 0x1d, 0xab, 0x89, 0x7e, 0x74, 0x27, 0x05, 0x69, 0x72, 0x3a, 0x0d, 0xe8, 0x5d, 0x24, 0xa9,
	0x1e, 0x97, 0x91, 0x3b, 0x22, 0xe5, 0x25, 0x94, 0x90, 0x67, 0x13, 0x51, 0xf9, 0x60, 0x2f, 0x7b,
	0xd8, 0xd7, 0xd6, 0x1c, 0x3c, 0xb5, 0x64, 0xe7, 0x5e, 0xa5, 0xfa, 0xba, 0x96, 0x9d, 0x2b, 0x79,
	0x74, 0x9b, 0xe7, 0x71, 0x71, 0x57, 0x66, 0x59, 0x18, 0x65, 0x71, 0x17, 0xce, 0xe0, 0xfc, 0xf0,
	0xb2, 0xe7, 0xfe, 0x0c, 0x36, 0x61, 0xd7, 0x26, 0x83, 0xdf, 0x82, 0xe3, 0xcb, 0x93, 0x2d, 0x20,
	0xdd, 0x94, 0xb4, 0x76, 0x95, 0x0c, 0xf7, 0xaa, 0xf7, 0xbe, 0x08, 0xfe, 0x99, 0x8e, 0x2f, 0x8f,
	0x2d, 0x6b, 0xf2, 0xdd, 0xf6, 0xce, 0xae, 0x83, 0xba, 0x6b, 0xfe, 0xd1, 0x87, 0xe0, 0x8f, 0xdb,
	0xeb, 0xcb, 0x7d, 0x4b, 0x9c, 0x53, 0xd9, 0xbe, 0x21, 0xb2, 0x9f, 0x6b, 0x7f, 0x6f, 0xd7, 0x60,
	0xe8, 0x57, 0x06, 0xc5, 0xc2, 0xa0, 0x78, 0x33, 0x28, 0x96, 0x06, 0x61, 0x65, 0x10, 0xd6, 0x06,
	0x61, 0x63, 0x10, 0x66, 0x8c, 0x30, 0x67, 0x84, 0x67, 0x46, 0x78, 0x61, 0x84, 0x57, 0x46, 0xa8,
	0x18, 0xc5, 0x82, 0x11, 0x96, 0x8c, 0xb0, 0x62, 0x14, 0x6b, 0x46, 0xd8, 0x30, 0x8a, 0xd9, 0x27,
	0x8a, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x0c, 0x4f, 0xc9, 0xb9, 0x01, 0x00, 0x00,
}

func (this *OmitEmpty) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OmitemptyDescription()
}
func (this *OmitEmpty_Inner) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OmitemptyDescription()
}
func OmitemptyDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4010 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7a, 0x5b, 0x70, 0xe3, 0xe6,
		0x75, 0xbf, 0xc0, 0x8b, 0x44, 0x1e, 0x52, 0x14, 0x04, 0xc9, 0x5a, 0xae, 0x1c, 0x73, 0x77, 0x65,
		0x3b, 0x96, 0xed, 0x58, 0xca, 0xac, 0x77, 0xd7, 0x36, 0xf7, 0x9f, 0x38, 0x94, 0xc4, 0x55, 0xe8,
		0xbf, 0x24, 0x2a, 0xa0, 0x14, 0x5f, 0x32, 0x1d, 0x0c, 0x04, 0x7e, 0xa4, 0xb0, 0x0b, 0x02, 0x08,
		0x00, 0xee, 0x5a, 0x3b, 0x7d, 0xd8, 0x8e, 0x7b, 0x99, 0xf4, 0x7e, 0x9b, 0x69, 0xe2, 0x3a, 0x6e,
		0x93, 0x4e, 0x6b, 0x37, 0xbd, 0x25, 0xbd, 0xa4, 0x71, 0xfa, 0x92, 0x97, 0xb4, 0xfb, 0xd4, 0x49,
		0xde, 0xfa, 0xd0, 0x69, 0xbd, 0x8a, 0x3b, 0x75, 0x5b, 0xb7, 0x75, 0xdb, 0xed, 0x8c, 0x67, 0xfc,
		0xd2, 0xf9, 0x6e, 0x20, 0x00, 0x52, 0x02, 0x94, 0x19, 0x3b, 0x4f, 0x12, 0xce, 0x77, 0x7e, 0x3f,
		0x9c, 0xef, 0x7c, 0xe7, 0x3b, 0xe7, 0x7c, 0x1f, 0x08, 0xb7, 0xab, 0x70, 0xb6, 0x6b, 0x59, 0x5d,
		0x03, 0x2d, 0xdb, 0x8e, 0xe5, 0x59, 0x7b, 0xfd, 0xce, 0x72, 0x1b, 0xb9, 0x9a, 0xa3, 0xdb, 0x9e,
		0xe5, 0x2c, 0x11, 0x99, 0x34, 0x45, 0x35, 0x96, 0xb8, 0xc6, 0xc2, 0x26, 0x4c, 0x5f, 0xd1, 0x0d,
		0xb4, 0xe6, 0x2b, 0xb6, 0x90, 0x27, 0x3d, 0x09, 0x99, 0x8e, 0x6e, 0xa0, 0xb2, 0x70, 0x36, 0xbd,
		0x58, 0x38, 0xff, 0xc0, 0x52, 0x04, 0xb4, 0x14, 0x46, 0x6c, 0x63, 0xb1, 0x4c, 0x10, 0x0b, 0x6f,
		0x65, 0x60, 0x66, 0xc4, 0xa8, 0x24, 0x41, 0xc6, 0x54, 0x7b, 0x98, 0x51, 0x58, 0xcc, 0xcb, 0xe4,
		0x7f, 0xa9, 0x0c, 0x13, 0xb6, 0xaa, 0x5d, 0x53, 0xbb, 0xa8, 0x9c, 0x22, 0x62, 0xfe, 0x28, 0x55,
		0x00, 0xda, 0xc8, 0x46, 0x66, 0x1b, 0x99, 0xda, 0x41, 0x39, 0x7d, 0x36, 0xbd, 0x98, 0x97, 0x03,
		0x12, 0xe9, 0x51, 0x98, 0xb6, 0xfb, 0x7b, 0x86, 0xae, 0x29, 0x01, 0x35, 0x38, 0x9b, 0x5e, 0xcc,
		0xca, 0x22, 0x1d, 0x58, 0x1b, 0x28, 0x3f, 0x04, 0x53, 0x37, 0x90, 0x7a, 0x2d, 0xa8, 0x5a, 0x20,
		0xaa, 0x25, 0x2c, 0x0e, 0x28, 0xae, 0x42, 0xb1, 0x87, 0x5c, 0x57, 0xed, 0x22, 0xc5, 0x3b, 0xb0,
		0x51, 0x39, 0x43, 0x66, 0x7f, 0x76, 0x68, 0xf6, 0xd1, 0x99, 0x17, 0x18, 0x6a, 0xe7, 0xc0, 0x46,
		0x52, 0x0d, 0xf2, 0xc8, 0xec, 0xf7, 0x28, 0x43, 0xf6, 0x08, 0xff, 0xd5, 0xcd, 0x7e, 0x2f, 0xca,
		0x92, 0xc3, 0x30, 0x46, 0x31, 0xe1, 0x22, 0xe7, 0xba, 0xae, 0xa1, 0xf2, 0x38, 0x21, 0x78, 0x68,
		0x88, 0xa0, 0x45, 0xc7, 0xa3, 0x1c, 0x1c, 0x27, 0xad, 0x42, 0x1e, 0xbd, 0xe8, 0x21, 0xd3, 0xd5,
		0x2d, 0xb3, 0x3c, 0x41, 0x48, 0x1e, 0x1c, 0xb1, 0x8a, 0xc8, 0x68, 0x47, 0x29, 0x06, 0x38, 0xe9,
		0x12, 0x4c, 0x58, 0xb6, 0xa7, 0x5b, 0xa6, 0x5b, 0xce, 0x9d, 0x15, 0x16, 0x0b, 0xe7, 0x3f, 0x32,
		0x32, 0x10, 0x9a, 0x54, 0x47, 0xe6, 0xca, 0x52, 0x03, 0x44, 0xd7, 0xea, 0x3b, 0x1a, 0x52, 0x34,
		0xab, 0x8d, 0x14, 0xdd, 0xec, 0x58, 0xe5, 0x3c, 0x21, 0x38, 0x33, 0x3c, 0x11, 0xa2, 0xb8, 0x6a,
		0xb5, 0x51, 0xc3, 0xec, 0x58, 0x72, 0xc9, 0x0d, 0x3d, 0x4b, 0x73, 0x30, 0xee, 0x1e, 0x98, 0x9e,
		0xfa, 0x62, 0xb9, 0x48, 0x22, 0x84, 0x3d, 0x2d, 0xbc, 0x31, 0x0e, 0x53, 0x49, 0x42, 0xec, 0x32,
		0x64, 0x3b, 0x78, 0x96, 0xe5, 0xd4, 0x49, 0x7c, 0x40, 0x31, 0x61, 0x27, 0x8e, 0xff, 0x90, 0x4e,
		0xac, 0x41, 0xc1, 0x44, 0xae, 0x87, 0xda, 0x34, 0x22, 0xd2, 0x09, 0x63, 0x0a, 0x28, 0x68, 0x38,
		0xa4, 0x32, 0x3f, 0x54, 0x48, 0x3d, 0x07, 0x53, 0xbe, 0x49, 0x8a, 0xa3, 0x9a, 0x5d, 0x1e, 0x9b,
		0xcb, 0x71, 0x96, 0x2c, 0xd5, 0x39, 0x4e, 0xc6, 0x30, 0xb9, 0x84, 0x42, 0xcf, 0xd2, 0x1a, 0x80,
		0x65, 0x22, 0xab, 0xa3, 0xb4, 0x91, 0x66, 0x94, 0x73, 0x47, 0x78, 0xa9, 0x89, 0x55, 0x86, 0xbc,
		0x64, 0x51, 0xa9, 0x66, 0x48, 0x4f, 0x0d, 0x42, 0x6d, 0xe2, 0x88, 0x48, 0xd9, 0xa4, 0x9b, 0x6c,
		0x28, 0xda, 0x76, 0xa1, 0xe4, 0x20, 0x1c, 0xf7, 0xa8, 0xcd, 0x66, 0x96, 0x27, 0x46, 0x2c, 0xc5,
		0xce, 0x4c, 0x66, 0x30, 0x3a, 0xb1, 0x49, 0x27, 0xf8, 0x28, 0xdd, 0x0f, 0xbe, 0x40, 0x21, 0x61,
		0x05, 0x24, 0x0b, 0x15, 0xb9, 0x70, 0x4b, 0xed, 0xa1, 0xf9, 0x9b, 0x50, 0x0a, 0xbb, 0x47, 0x9a,
		0x85, 0xac, 0xeb, 0xa9, 0x8e, 0x47, 0xa2, 0x30, 0x2b, 0xd3, 0x07, 0x49, 0x84, 0x34, 0x32, 0xdb,
		0x24, 0xcb, 0x65, 0x65, 0xfc, 0xaf, 0xf4, 0xa9, 0xc1, 0x84, 0xd3, 0x64, 0xc2, 0x1f, 0x1d, 0x5e,
		0xd1, 0x10, 0x73, 0x74, 0xde, 0xf3, 0x4f, 0xc0, 0x64, 0x68, 0x02, 0x49, 0x5f, 0xbd, 0xf0, 0xe3,
		0x70, 0xcf, 0x48, 0x6a, 0xe9, 0x39, 0x98, 0xed, 0x9b, 0xba, 0xe9, 0x21, 0xc7, 0x76, 0x10, 0x8e,
		0x58, 0xfa, 0xaa, 0xf2, 0x3f, 0x4f, 0x1c, 0x11, 0x73, 0xbb, 0x41, 0x6d, 0xca, 0x22, 0xcf, 0xf4,
		0x87, 0x85, 0x8f, 0xe4, 0x73, 0x6f, 0x4f, 0x88, 0xb7, 0x6e, 0xdd, 0xba, 0x95, 0x5a, 0xf8, 0xe2,
		0x38, 0xcc, 0x8e, 0xda, 0x33, 0x23, 0xb7, 0xef, 0x1c, 0x8c, 0x9b, 0xfd, 0xde, 0x1e, 0x72, 0x88,
		0x93, 0xb2, 0x32, 0x7b, 0x92, 0x6a, 0x90, 0x35, 0xd4, 0x3d, 0x64, 0x94, 0x33, 0x67, 0x85, 0xc5,
		0xd2, 0xf9, 0x47, 0x13, 0xed, 0xca, 0xa5, 0x0d, 0x0c, 0x91, 0x29, 0x52, 0xfa, 0x24, 0x64, 0x58,
		0x8a, 0xc6, 0x0c, 0x8f, 0x24, 0x63, 0xc0, 0x7b, 0x49, 0x26, 0x38, 0xe9, 0x5e, 0xc8, 0xe3, 0xbf,
		0x34, 0x36, 0xc6, 0x89, 0xcd, 0x39, 0x2c, 0xc0, 0x71, 0x21, 0xcd, 0x43, 0x8e, 0x6c, 0x93, 0x36,
		0xe2, 0xa5, 0xcd, 0x7f, 0xc6, 0x81, 0xd5, 0x46, 0x1d, 0xb5, 0x6f, 0x78, 0xca, 0x75, 0xd5, 0xe8,
		0x23, 0x12, 0xf0, 0x79, 0xb9, 0xc8, 0x84, 0x9f, 0xc5, 0x32, 0xe9, 0x0c, 0x14, 0xe8, 0xae, 0xd2,
		0xcd, 0x36, 0x7a, 0x91, 0x64, 0xcf, 0xac, 0x4c, 0x37, 0x5a, 0x03, 0x4b, 0xf0, 0xeb, 0xaf, 0xba,
		0x96, 0xc9, 0x43, 0x93, 0xbc, 0x02, 0x0b, 0xc8, 0xeb, 0x9f, 0x88, 0x26, 0xee, 0xfb, 0x46, 0x4f,
		0x2f, 0x1a, 0x53, 0x0b, 0xdf, 0x4c, 0x41, 0x86, 0xe4, 0x8b, 0x29, 0x28, 0xec, 0x3c, 0xbf, 0x5d,
		0x57, 0xd6, 0x9a, 0xbb, 0x2b, 0x1b, 0x75, 0x51, 0x90, 0x4a, 0x00, 0x44, 0x70, 0x65, 0xa3, 0x59,
		0xdb, 0x11, 0x53, 0xfe, 0x73, 0x63, 0x6b, 0xe7, 0xd2, 0x05, 0x31, 0xed, 0x03, 0x76, 0xa9, 0x20,
		0x13, 0x54, 0x78, 0xfc, 0xbc, 0x98, 0x95, 0x44, 0x28, 0x52, 0x82, 0xc6, 0x73, 0xf5, 0xb5, 0x4b,
		0x17, 0xc4, 0xf1, 0xb0, 0xe4, 0xf1, 0xf3, 0xe2, 0x84, 0x34, 0x09, 0x79, 0x22, 0x59, 0x69, 0x36,
		0x37, 0xc4, 0x9c, 0xcf, 0xd9, 0xda, 0x91, 0x1b, 0x5b, 0xeb, 0x62, 0xde, 0xe7, 0x5c, 0x97, 0x9b,
		0xbb, 0xdb, 0x22, 0xf8, 0x0c, 0x9b, 0xf5, 0x56, 0xab, 0xb6, 0x5e, 0x17, 0x0b, 0xbe, 0xc6, 0xca,
		0xf3, 0x3b, 0xf5, 0x96, 0x58, 0x0c, 0x99, 0xf5, 0xf8, 0x79, 0x71, 0xd2, 0x7f, 0x45, 0x7d, 0x6b,
		0x77, 0x53, 0x2c, 0x49, 0xd3, 0x30, 0x49, 0x5f, 0xc1, 0x8d, 0x98, 0x8a, 0x88, 0x2e, 0x5d, 0x10,
		0xc5, 0x81, 0x21, 0x94, 0x65, 0x3a, 0x24, 0xb8, 0x74, 0x41, 0x94, 0x16, 0x56, 0x21, 0x4b, 0xa2,
		0x4b, 0x92, 0xa0, 0xb4, 0x51, 0x5b, 0xa9, 0x6f, 0x28, 0xcd, 0xed, 0x9d, 0x46, 0x73, 0xab, 0xb6,
		0x21, 0x0a, 0x03, 0x99, 0x5c, 0xff, 0xcc, 0x6e, 0x43, 0xae, 0xaf, 0x89, 0xa9, 0xa0, 0x6c, 0xbb,
		0x5e, 0xdb, 0xa9, 0xaf, 0x89, 0xe9, 0x05, 0x0d, 0x66, 0x47, 0xe5, 0xc9, 0x91, 0x3b, 0x23, 0xb0,
		0xc4, 0xa9, 0x23, 0x96, 0x98, 0x70, 0x0d, 0x2d, 0xf1, 0x0f, 0x52, 0x30, 0x33, 0xa2, 0x56, 0x8c,
		0x7c, 0xc9, 0xd3, 0x90, 0xa5, 0x21, 0x4a, 0xab, 0xe7, 0xc3, 0x23, 0x8b, 0x0e, 0x09, 0xd8, 0xa1,
		0x0a, 0x4a, 0x70, 0xc1, 0x0e, 0x22, 0x7d, 0x44, 0x07, 0x81, 0x29, 0x86, 0x72, 0xfa, 0x8f, 0x0d,
		0xe5, 0x74, 0x5a, 0xf6, 0x2e, 0x25, 0x29, 0x7b, 0x44, 0x76, 0xb2, 0xdc, 0x9e, 0x1d, 0x91, 0xdb,
		0x2f, 0xc3, 0xf4, 0x10, 0x51, 0xe2, 0x1c, 0xfb, 0x92, 0x00, 0xe5, 0xa3, 0x9c, 0x13, 0x93, 0xe9,
		0x52, 0xa1, 0x4c, 0x77, 0x39, 0xea, 0xc1, 0x73, 0x47, 0x2f, 0xc2, 0xd0, 0x5a, 0xbf, 0x26, 0xc0,
		0xdc, 0xe8, 0x4e, 0x71, 0xa4, 0x0d, 0x9f, 0x84, 0xf1, 0x1e, 0xf2, 0xf6, 0x2d, 0xde, 0x2d, 0x7d,
		0x74, 0x44, 0x0d, 0xc6, 0xc3, 0xd1, 0xc5, 0x66, 0xa8, 0x60, 0x11, 0x4f, 0x1f, 0xd5, 0xee, 0x51,
		0x6b, 0x86, 0x2c, 0xfd, 0x42, 0x0a, 0xee, 0x19, 0x49, 0x3e, 0xd2, 0xd0, 0xfb, 0x00, 0x74, 0xd3,
		0xee, 0x7b, 0xb4, 0x23, 0xa2, 0x09, 0x36, 0x4f, 0x24, 0x24, 0x79, 0xe1, 0xe4, 0xd9, 0xf7, 0xfc,
		0xf1, 0x34, 0x19, 0x07, 0x2a, 0x22, 0x0a, 0x4f, 0x0e, 0x0c, 0xcd, 0x10, 0x43, 0x2b, 0x47, 0xcc,
		0x74, 0x28, 0x30, 0x3f, 0x0e, 0xa2, 0x66, 0xe8, 0xc8, 0xf4, 0x14, 0xd7, 0x73, 0x90, 0xda, 0xd3,
		0xcd, 0x2e, 0xa9, 0x20, 0xb9, 0x6a, 0xb6, 0xa3, 0x1a, 0x2e, 0x92, 0xa7, 0xe8, 0x70, 0x8b, 0x8f,
		0x62, 0x04, 0x09, 0x20, 0x27, 0x80, 0x18, 0x0f, 0x21, 0xe8, 0xb0, 0x8f, 0x58, 0xf8, 0xf9, 0x3c,
		0x14, 0x02, 0x7d, 0xb5, 0x74, 0x0e, 0x8a, 0x57, 0xd5, 0xeb, 0xaa, 0xc2, 0xcf, 0x4a, 0xd4, 0x13,
		0x05, 0x2c, 0xdb, 0x66, 0xe7, 0xa5, 0x8f, 0xc3, 0x2c, 0x51, 0xb1, 0xfa, 0x1e, 0x72, 0x14, 0xcd,
		0x50, 0x5d, 0x97, 0x38, 0x2d, 0x47, 0x54, 0x25, 0x3c, 0xd6, 0xc4, 0x43, 0xab, 0x7c, 0x44, 0xba,
		0x08, 0x33, 0x04, 0xd1, 0xeb, 0x1b, 0x9e, 0x6e, 0x1b, 0x48, 0xc1, 0xa7, 0x37, 0x97, 0x54, 0x12,
		0xdf, 0xb2, 0x69, 0xac, 0xb1, 0xc9, 0x14, 0xb0, 0x45, 0xae, 0xb4, 0x06, 0xf7, 0x11, 0x58, 0x17,
		0x99, 0xc8, 0x51, 0x3d, 0xa4, 0xa0, 0xcf, 0xf7, 0x55, 0xc3, 0x55, 0x54, 0xb3, 0xad, 0xec, 0xab,
		0xee, 0x7e, 0x79, 0x16, 0x13, 0xac, 0xa4, 0xca, 0x82, 0x7c, 0x1a, 0x2b, 0xae, 0x33, 0xbd, 0x3a,
		0x51, 0xab, 0x99, 0xed, 0x4f, 0xab, 0xee, 0xbe, 0x54, 0x85, 0x39, 0xc2, 0xe2, 0x7a, 0x8e, 0x6e,
		0x76, 0x15, 0x6d, 0x1f, 0x69, 0xd7, 0x94, 0xbe, 0xd7, 0x79, 0xb2, 0x7c, 0x6f, 0xf0, 0xfd, 0xc4,
		0xc2, 0x16, 0xd1, 0x59, 0xc5, 0x2a, 0xbb, 0x5e, 0xe7, 0x49, 0xa9, 0x05, 0x45, 0xbc, 0x18, 0x3d,
		0xfd, 0x26, 0x52, 0x3a, 0x96, 0x43, 0x4a, 0x63, 0x69, 0x44, 0x6a, 0x0a, 0x78, 0x70, 0xa9, 0xc9,
		0x00, 0x9b, 0x56, 0x1b, 0x55, 0xb3, 0xad, 0xed, 0x7a, 0x7d, 0x4d, 0x2e, 0x70, 0x96, 0x2b, 0x96,
		0x83, 0x03, 0xaa, 0x6b, 0xf9, 0x0e, 0x2e, 0xd0, 0x80, 0xea, 0x5a, 0xdc, 0xbd, 0x17, 0x61, 0x46,
		0xd3, 0xe8, 0x9c, 0x75, 0x4d, 0x61, 0x67, 0x2c, 0xb7, 0x2c, 0x86, 0x9c, 0xa5, 0x69, 0xeb, 0x54,
		0x81, 0xc5, 0xb8, 0x2b, 0x3d, 0x05, 0xf7, 0x0c, 0x9c, 0x15, 0x04, 0x4e, 0x0f, 0xcd, 0x32, 0x0a,
		0xbd, 0x08, 0x33, 0xf6, 0xc1, 0x30, 0x50, 0x0a, 0xbd, 0xd1, 0x3e, 0x88, 0xc2, 0x9e, 0x80, 0x59,
		0x7b, 0xdf, 0x1e, 0xc6, 0x3d, 0x12, 0xc4, 0x49, 0xf6, 0xbe, 0x1d, 0x05, 0x3e, 0x48, 0x0e, 0xdc,
		0x0e, 0xd2, 0x54, 0x0f, 0xb5, 0xcb, 0xa7, 0x82, 0xea, 0x81, 0x01, 0x69, 0x19, 0x44, 0x4d, 0x53,
		0x90, 0xa9, 0xee, 0x19, 0x48, 0x51, 0x1d, 0x64, 0xaa, 0x6e, 0xf9, 0x4c, 0x50, 0xb9, 0xa4, 0x69,
		0x75, 0x32, 0x5a, 0x23, 0x83, 0xd2, 0x23, 0x30, 0x6d, 0xed, 0x5d, 0xd5, 0x68, 0x48, 0x2a, 0xb6,
		0x83, 0x3a, 0xfa, 0x8b, 0xe5, 0x07, 0x88, 0x7f, 0xa7, 0xf0, 0x00, 0x09, 0xc8, 0x6d, 0x22, 0x96,
		0x1e, 0x06, 0x51, 0x73, 0xf7, 0x55, 0xc7, 0x26, 0x39, 0xd9, 0xb5, 0x55, 0x0d, 0x95, 0x1f, 0xa4,
		0xaa, 0x54, 0xbe, 0xc5, 0xc5, 0x78, 0x4b, 0xb8, 0x37, 0xf4, 0x8e, 0xc7, 0x19, 0x1f, 0xa2, 0x5b,
		0x82, 0xc8, 0x18, 0xdb, 0x22, 0x88, 0xd8, 0x15, 0xa1, 0x17, 0x2f, 0x12, 0xb5, 0x92, 0xbd, 0x6f,
		0x07, 0xdf, 0x7b, 0x3f, 0x4c, 0x62, 0xcd, 0xc1, 0x4b, 0x1f, 0xa6, 0x0d, 0x99, 0xbd, 0x1f, 0x78,
		0xe3, 0x05, 0x98, 0xc3, 0x4a, 0x3d, 0xe4, 0xa9, 0x6d, 0xd5, 0x53, 0x03, 0xda, 0x1f, 0x23, 0xda,
		0xd8, 0xef, 0x9b, 0x6c, 0x30, 0x64, 0xa7, 0xd3, 0xdf, 0x3b, 0xf0, 0x23, 0xeb, 0x31, 0x6a, 0x27,
		0x96, 0xf1, 0xd8, 0xfa, 0xc0, 0x9a, 0xee, 0x85, 0x2a, 0x14, 0x83, 0x81, 0x2f, 0xe5, 0x81, 0x86,
		0xbe, 0x28, 0xe0, 0x2e, 0x68, 0xb5, 0xb9, 0x86, 0xfb, 0x97, 0x17, 0xea, 0x62, 0x0a, 0xf7, 0x51,
		0x1b, 0x8d, 0x9d, 0xba, 0x22, 0xef, 0x6e, 0xed, 0x34, 0x36, 0xeb, 0x62, 0x3a, 0xd8, 0xb0, 0x7f,
		0x37, 0x05, 0xa5, 0xf0, 0xd9, 0x4b, 0xfa, 0x7f, 0x70, 0x8a, 0x5f, 0x94, 0xb8, 0xc8, 0x53, 0x6e,
		0xe8, 0x0e, 0xd9, 0x8b, 0x3d, 0x95, 0xd6, 0x45, 0x3f, 0x1a, 0x66, 0x99, 0x56, 0x0b, 0x79, 0xcf,
		0xea, 0x0e, 0xde, 0x69, 0x3d, 0xd5, 0x93, 0x36, 0xe0, 0x8c, 0x69, 0x29, 0xae, 0xa7, 0x9a, 0x6d,
		0xd5, 0x69, 0x2b, 0x83, 0x2b, 0x2a, 0x45, 0xd5, 0x34, 0xe4, 0xba, 0x16, 0xad, 0x81, 0x3e, 0xcb,
		0x47, 0x4c, 0xab, 0xc5, 0x94, 0x07, 0xc5, 0xa1, 0xc6, 0x54, 0x23, 0x91, 0x9b, 0x3e, 0x2a, 0x72,
		0xef, 0x85, 0x7c, 0x4f, 0xb5, 0x15, 0x64, 0x7a, 0xce, 0x01, 0xe9, 0xb8, 0x73, 0x72, 0xae, 0xa7,
		0xda, 0x75, 0xfc, 0xfc, 0xe1, 0x1c, 0x7c, 0xfe, 0x3e, 0x0d, 0xc5, 0x60, 0xd7, 0x8d, 0x0f, 0x31,
		0x1a, 0x29, 0x50, 0x02, 0x49, 0x61, 0xf7, 0x1f, 0xdb, 0xa3, 0x2f, 0xad, 0xe2, 0xca, 0x55, 0x1d,
		0xa7, 0xbd, 0xb0, 0x4c, 0x91, 0xb8, 0x6b, 0xc0, 0xa1, 0x85, 0x68, 0xef, 0x91, 0x93, 0xd9, 0x93,
		0xb4, 0x0e, 0xe3, 0x57, 0x5d, 0xc2, 0x3d, 0x4e, 0xb8, 0x1f, 0x38, 0x9e, 0xfb, 0x99, 0x16, 0x21,
		0xcf, 0x3f, 0xd3, 0x52, 0xb6, 0x9a, 0xf2, 0x66, 0x6d, 0x43, 0x66, 0x70, 0xe9, 0x34, 0x64, 0x0c,
		0xf5, 0xe6, 0x41, 0xb8, 0xc6, 0x11, 0x51, 0x52, 0xc7, 0x9f, 0x86, 0xcc, 0x0d, 0xa4, 0x5e, 0x0b,
		0x57, 0x16, 0x22, 0xfa, 0x00, 0x43, 0x7f, 0x19, 0xb2, 0xc4, 0x5f, 0x12, 0x00, 0xf3, 0x98, 0x38,
		0x26, 0xe5, 0x20, 0xb3, 0xda, 0x94, 0x71, 0xf8, 0x8b, 0x50, 0xa4, 0x52, 0x65, 0xbb, 0x51, 0x5f,
		0xad, 0x8b, 0xa9, 0x85, 0x8b, 0x30, 0x4e, 0x9d, 0x80, 0xb7, 0x86, 0xef, 0x06, 0x71, 0x8c, 0x3d,
		0x32, 0x0e, 0x81, 0x8f, 0xee, 0x6e, 0xae, 0xd4, 0x65, 0x31, 0x15, 0x5c, 0x5e, 0x17, 0x8a, 0xc1,
		0x86, 0xfb, 0xc3, 0x89, 0xa9, 0x6f, 0x0b, 0x50, 0x08, 0x34, 0xd0, 0xb8, 0xf3, 0x51, 0x0d, 0xc3,
		0xba, 0xa1, 0xa8, 0x86, 0xae, 0xba, 0x2c, 0x28, 0x80, 0x88, 0x6a, 0x58, 0x92, 0x74, 0xd1, 0x3e,
		0x14, 0xe3, 0x5f, 0x15, 0x40, 0x8c, 0xf6, 0xae, 0x11, 0x03, 0x85, 0x1f, 0xa9, 0x81, 0xaf, 0x08,
		0x50, 0x0a, 0x37, 0xac, 0x11, 0xf3, 0xce, 0xfd, 0x48, 0xcd, 0x7b, 0x33, 0x05, 0x93, 0xa1, 0x36,
		0x35, 0xa9, 0x75, 0x9f, 0x87, 0x69, 0xbd, 0x8d, 0x7a, 0xb6, 0xe5, 0x21, 0x53, 0x3b, 0x50, 0x0c,
		0x74, 0x1d, 0x19, 0xe5, 0x05, 0x92, 0x28, 0x96, 0x8f, 0x6f, 0x84, 0x97, 0x1a, 0x03, 0xdc, 0x06,
		0x86, 0x55, 0x67, 0x1a, 0x6b, 0xf5, 0xcd, 0xed, 0xe6, 0x4e, 0x7d, 0x6b, 0xf5, 0x79, 0x65, 0x77,
		0xeb, 0xff, 0x6f, 0x35, 0x9f, 0xdd, 0x92, 0x45, 0x3d, 0xa2, 0xf6, 0x01, 0x6e, 0xf5, 0x6d, 0x10,
		0xa3, 0x46, 0x49, 0xa7, 0x60, 0x94, 0x59, 0xe2, 0x98, 0x34, 0x03, 0x53, 0x5b, 0x4d, 0xa5, 0xd5,
		0x58, 0xab, 0x2b, 0xf5, 0x2b, 0x57, 0xea, 0xab, 0x3b, 0x2d, 0x7a, 0xb5, 0xe1, 0x6b, 0xef, 0x84,
		0x37, 0xf5, 0xcb, 0x69, 0x98, 0x19, 0x61, 0x89, 0x54, 0x63, 0x87, 0x12, 0x7a, 0x4e, 0x7a, 0x2c,
		0x89, 0xf5, 0x4b, 0xb8, 0x2b, 0xd8, 0x56, 0x1d, 0x8f, 0x9d, 0x61, 0x1e, 0x06, 0xec, 0x25, 0xd3,
		0xd3, 0x3b, 0x3a, 0x72, 0xd8, 0x4d, 0x10, 0x3d, 0xa9, 0x4c, 0x0d, 0xe4, 0xf4, 0x32, 0xe8, 0x63,
		0x20, 0xd9, 0x96, 0xab, 0x7b, 0xfa, 0x75, 0xa4, 0xe8, 0x26, 0xbf, 0x36, 0xc2, 0x27, 0x97, 0x8c,
		0x2c, 0xf2, 0x91, 0x86, 0xe9, 0xf9, 0xda, 0x26, 0xea, 0xaa, 0x11, 0x6d, 0x9c, 0xc0, 0xd3, 0xb2,
		0xc8, 0x47, 0x7c, 0xed, 0x73, 0x50, 0x6c, 0x5b, 0x7d, 0xdc, 0xce, 0x51, 0x3d, 0x5c, 0x2f, 0x04,
		0xb9, 0x40, 0x65, 0xbe, 0x0a, 0x6b, 0xd4, 0x07, 0xf7, 0x55, 0x45, 0xb9, 0x40, 0x65, 0x54, 0xe5,
		0x21, 0x98, 0x52, 0xbb, 0x5d, 0x07, 0x93, 0x73, 0x22, 0x7a, 0xf4, 0x28, 0xf9, 0x62, 0xa2, 0x38,
		0xff, 0x0c, 0xe4, 0xb8, 0x1f, 0x70, 0x49, 0xc6, 0x9e, 0x50, 0x6c, 0x7a, 0x9e, 0x4e, 0x2d, 0xe6,
		0xe5, 0x9c, 0xc9, 0x07, 0xcf, 0x41, 0x51, 0x77, 0x95, 0xc1, 0xf5, 0x7b, 0xea, 0x6c, 0x6a, 0x31,
		0x27, 0x17, 0x74, 0xd7, 0xbf, 0xba, 0x5c, 0x78, 0x2d, 0x05, 0xa5, 0xf0, 0xe7, 0x03, 0x69, 0x0d,
		0x72, 0x86, 0xa5, 0xa9, 0x24, 0xb4, 0xe8, 0xb7, 0xab, 0xc5, 0x98, 0x2f, 0x0e, 0x4b, 0x1b, 0x4c,
		0x5f, 0xf6, 0x91, 0xf3, 0x7f, 0x2b, 0x40, 0x8e, 0x8b, 0xa5, 0x39, 0xc8, 0xd8, 0xaa, 0xb7, 0x4f,
		0xe8, 0xb2, 0x2b, 0x29, 0x51, 0x90, 0xc9, 0x33, 0x96, 0xbb, 0xb6, 0x6a, 0x92, 0x10, 0x60, 0x72,
		0xfc, 0x8c, 0xd7, 0xd5, 0x40, 0x6a, 0x9b, 0x9c, 0x6b, 0xac, 0x5e, 0x0f, 0x99, 0x9e, 0xcb, 0xd7,
		0x95, 0xc9, 0x57, 0x99, 0x58, 0x7a, 0x14, 0xa6, 0x3d, 0x47, 0xd5, 0x8d, 0x90, 0x6e, 0x86, 0xe8,
		0x8a, 0x7c, 0xc0, 0x57, 0xae, 0xc2, 0x69, 0xce, 0xdb, 0x46, 0x9e, 0xaa, 0xed, 0xa3, 0xf6, 0x00,
		0x34, 0x4e, 0xee, 0x2f, 0x4e, 0x31, 0x85, 0x35, 0x36, 0xce, 0xb1, 0x0b, 0xdf, 0x17, 0x60, 0x9a,
		0x9f, 0xc4, 0xda, 0xbe, 0xb3, 0x36, 0x01, 0x54, 0xd3, 0xb4, 0xbc, 0xa0, 0xbb, 0x86, 0x43, 0x79,
		0x08, 0xb7, 0x54, 0xf3, 0x41, 0x72, 0x80, 0x60, 0xbe, 0x07, 0x30, 0x18, 0x39, 0xd2, 0x6d, 0x67,
		0xa0, 0xc0, 0xbe, 0x0d, 0x91, 0x0f, 0x8c, 0xf4, 0xec, 0x0e, 0x54, 0x84, 0x8f, 0x6c, 0xd2, 0x2c,
		0x64, 0xf7, 0x50, 0x57, 0x37, 0xd9, 0x8d, 0x2f, 0x7d, 0xe0, 0x37, 0x2c, 0x19, 0xff, 0x86, 0x65,
		0xe5, 0x73, 0x30, 0xa3, 0x59, 0xbd, 0xa8, 0xb9, 0x2b, 0x62, 0xe4, 0xfe, 0xc0, 0xfd, 0xb4, 0xf0,
		0x02, 0x0c, 0x5a, 0xcc, 0xf7, 0x04, 0xe1, 0xab, 0xa9, 0xf4, 0xfa, 0xf6, 0xca, 0xd7, 0x52, 0xf3,
		0xeb, 0x14, 0xba, 0xcd, 0x67, 0x2a, 0xa3, 0x8e, 0x81, 0x34, 0x6c, 0x3d, 0xfc, 0xd3, 0xa3, 0xf0,
		0x58, 0x57, 0xf7, 0xf6, 0xfb, 0x7b, 0x4b, 0x9a, 0xd5, 0x5b, 0xee, 0x5a, 0x5d, 0x6b, 0xf0, 0x4d,
		0x15, 0x3f, 0x91, 0x07, 0xf2, 0x1f, 0xfb, 0xae, 0x9a, 0xf7, 0xa5, 0xf3, 0xb1, 0x1f, 0x61, 0xab,
		0x5b, 0x30, 0xc3, 0x94, 0x15, 0xf2, 0x61, 0x87, 0x1e, 0x4f, 0xa4, 0x63, 0x2f, 0xc7, 0xca, 0xdf,
		0x78, 0x8b, 0x94, 0x6b, 0x79, 0x9a, 0x41, 0xf1, 0x18, 0x3d, 0xc1, 0x54, 0x65, 0xb8, 0x27, 0xc4,
		0x47, 0xb7, 0x26, 0x72, 0x62, 0x18, 0xbf, 0xcb, 0x18, 0x67, 0x02, 0x8c, 0x2d, 0x06, 0xad, 0xae,
		0xc2, 0xe4, 0x49, 0xb8, 0xfe, 0x9a, 0x71, 0x15, 0x51, 0x90, 0x64, 0x1d, 0xa6, 0x08, 0x89, 0xd6,
		0x77, 0x3d, 0xab, 0x47, 0xf2, 0xde, 0xf1, 0x34, 0x7f, 0xf3, 0x16, 0xdd, 0x2b, 0x25, 0x0c, 0x5b,
		0xf5, 0x51, 0xd5, 0x2a, 0x90, 0x6f, 0x59, 0x6d, 0xa4, 0x19, 0x31, 0x0c, 0xb7, 0x99, 0x21, 0xbe,
		0x7e, 0xf5, 0xb3, 0x30, 0x8b, 0xff, 0x27, 0x69, 0x29, 0x68, 0x49, 0xfc, 0x4d, 0x5a, 0xf9, 0xfb,
		0x2f, 0xd1, 0xed, 0x38, 0xe3, 0x13, 0x04, 0x6c, 0x0a, 0xac, 0x62, 0x17, 0x79, 0x1e, 0x72, 0x5c,
		0x45, 0x35, 0x46, 0x99, 0x17, 0xb8, 0x8a, 0x28, 0x7f, 0xe9, 0x9d, 0xf0, 0x2a, 0xae, 0x53, 0x64,
		0xcd, 0x30, 0xaa, 0xbb, 0x70, 0x6a, 0x44, 0x54, 0x24, 0xe0, 0x7c, 0x99, 0x71, 0xce, 0x0e, 0x45,
		0x06, 0xa6, 0xdd, 0x06, 0x2e, 0xf7, 0xd7, 0x32, 0x01, 0xe7, 0x6f, 0x32, 0x4e, 0x89, 0x61, 0xf9,
		0x92, 0x62, 0xc6, 0x67, 0x60, 0xfa, 0x3a, 0x72, 0xf6, 0x2c, 0x97, 0x5d, 0xff, 0x24, 0xa0, 0x7b,
		0x85, 0xd1, 0x4d, 0x31, 0x20, 0xb9, 0x0f, 0xc2, 0x5c, 0x4f, 0x41, 0xae, 0xa3, 0x6a, 0x28, 0x01,
		0xc5, 0x97, 0x19, 0xc5, 0x04, 0xd6, 0xc7, 0xd0, 0x1a, 0x14, 0xbb, 0x16, 0xab, 0x4c, 0xf1, 0xf0,
		0x57, 0x19, 0xbc, 0xc0, 0x31, 0x8c, 0xc2, 0xb6, 0xec, 0xbe, 0x81, 0xcb, 0x56, 0x3c, 0xc5, 0x6f,
		0x71, 0x0a, 0x8e, 0x61, 0x14, 0x27, 0x70, 0xeb, 0x6f, 0x73, 0x0a, 0x37, 0xe0, 0xcf, 0xa7, 0xa1,
		0x60, 0x99, 0xc6, 0x81, 0x65, 0x26, 0x31, 0xe2, 0x2b, 0x8c, 0x01, 0x18, 0x04, 0x13, 0x5c, 0x86,
		0x7c, 0xd2, 0x85, 0xf8, 0xdd, 0x77, 0xf8, 0xf6, 0xe0, 0x2b, 0xb0, 0x0e, 0x53, 0x3c, 0x41, 0xe9,
		0x96, 0x99, 0x80, 0xe2, 0xf7, 0x18, 0x45, 0x29, 0x00, 0x63, 0xd3, 0xf0, 0x90, 0xeb, 0x75, 0x51,
		0x12, 0x92, 0xd7, 0xf8, 0x34, 0x18, 0x84, 0xb9, 0x72, 0x0f, 0x99, 0xda, 0x7e, 0x32, 0x86, 0xd7,
		0xb9, 0x2b, 0x39, 0x06, 0x53, 0xac, 0xc2, 0x64, 0x4f, 0x75, 0xdc, 0x7d, 0xd5, 0x48, 0xb4, 0x1c,
		0xbf, 0xcf, 0x38, 0x8a, 0x3e, 0x88, 0x79, 0xa4, 0x6f, 0x9e, 0x84, 0xe6, 0x6b, 0xdc, 0x23, 0x01,
		0x18, 0xdb, 0x7a, 0xae, 0x47, 0xee, 0xca, 0x4e, 0xc2, 0xf6, 0x07, 0x7c, 0xeb, 0x51, 0xec, 0x66,
		0x90, 0xf1, 0x32, 0xe4, 0x5d, 0xfd, 0x66, 0x22, 0x9a, 0x3f, 0xe4, 0x2b, 0x4d, 0x00, 0x18, 0xfc,
		0x3c, 0x9c, 0x1e, 0x59, 0x26, 0x12, 0x90, 0xfd, 0x11, 0x23, 0x9b, 0x1b, 0x51, 0x2a, 0x58, 0x4a,
		0x38, 0x29, 0xe5, 0x1f, 0xf3, 0x94, 0x80, 0x22, 0x5c, 0xdb, 0xf8, 0xac, 0xe0, 0xaa, 0x9d, 0x93,
		0x79, 0xed, 0x4f, 0xb8, 0xd7, 0x28, 0x36, 0xe4, 0xb5, 0x1d, 0x98, 0x63, 0x8c, 0x27, 0x5b, 0xd7,
		0xaf, 0xf3, 0xc4, 0x4a, 0xd1, 0xbb, 0xe1, 0xd5, 0xfd, 0x1c, 0xcc, 0xfb, 0xee, 0xe4, 0x4d, 0xa9,
		0xab, 0xf4, 0x54, 0x3b, 0x01, 0xf3, 0x37, 0x18, 0x33, 0xcf, 0xf8, 0x7e, 0x57, 0xeb, 0x6e, 0xaa,
		0x36, 0x26, 0x7f, 0x0e, 0xca, 0x9c, 0xbc, 0x6f, 0x3a, 0x48, 0xb3, 0xba, 0xa6, 0x7e, 0x13, 0xb5,
		0x13, 0x50, 0xff, 0x69, 0x64, 0xa9, 0x76, 0x03, 0x70, 0xcc, 0xdc, 0x00, 0xd1, 0xef, 0x55, 0x14,
		0xbd, 0x67, 0x5b, 0x8e, 0x17, 0xc3, 0xf8, 0x67, 0x7c, 0xa5, 0x7c, 0x5c, 0x83, 0xc0, 0xaa, 0x75,
		0x28, 0x91, 0xc7, 0xa4, 0x21, 0xf9, 0xe7, 0x8c, 0x68, 0x72, 0x80, 0x62, 0x89, 0x43, 0xb3, 0x7a,
		0xb6, 0xea, 0x24, 0xc9, 0x7f, 0x7f, 0xc1, 0x13, 0x07, 0x83, 0xb0, 0xc4, 0xe1, 0x1d, 0xd8, 0x08,
		0x57, 0xfb, 0x04, 0x0c, 0xdf, 0xe4, 0x89, 0x83, 0x63, 0x18, 0x05, 0x6f, 0x18, 0x12, 0x50, 0xfc,
		0x25, 0xa7, 0xe0, 0x18, 0x4c, 0xf1, 0x99, 0x41, 0xa1, 0x75, 0x50, 0x57, 0x77, 0x3d, 0x87, 0xb6,
		0xc2, 0xc7, 0x53, 0x7d, 0xeb, 0x9d, 0x70, 0x13, 0x26, 0x07, 0xa0, 0x38, 0x13, 0xb1, 0x2b, 0x54,
		0x72, 0x52, 0x8a, 0x37, 0xec, 0x0d, 0x9e, 0x89, 0x02, 0x30, 0x6c, 0x5b, 0xa0, 0x43, 0xc4, 0x6e,
		0xd7, 0xf0, 0xf9, 0x20, 0x01, 0xdd, 0xb7, 0x23, 0xc6, 0xb5, 0x38, 0x16, 0x73, 0x06, 0xfa, 0x9f,
		0xbe, 0x79, 0x0d, 0x1d, 0x24, 0x8a, 0xce, 0xbf, 0x8a, 0xf4, 0x3f, 0xbb, 0x14, 0x49, 0x73, 0xc8,
		0x54, 0xa4, 0x9f, 0x92, 0xe2, 0x7e, 0x05, 0x54, 0xfe, 0x89, 0xbb, 0x6c, 0xbe, 0xe1, 0x76, 0xaa,
		0xba, 0x81, 0x83, 0x3c, 0xdc, 0xf4, 0xc4, 0x93, 0xbd, 0x74, 0xd7, 0x8f, 0xf3, 0x50, 0xcf, 0x53,
		0xbd, 0x02, 0x93, 0xa1, 0x86, 0x27, 0x9e, 0xea, 0x27, 0x19, 0x55, 0x31, 0xd8, 0xef, 0x54, 0x2f,
		0x42, 0x06, 0x37, 0x2f, 0xf1, 0xf0, 0x9f, 0x62, 0x70, 0xa2, 0x5e, 0xfd, 0x04, 0xe4, 0x78, 0xd3,
		0x12, 0x0f, 0xfd, 0x69, 0x06, 0xf5, 0x21, 0x18, 0xce, 0x1b, 0x96, 0x78, 0xf8, 0xcf, 0x70, 0x38,
		0x87, 0x60, 0x78, 0x72, 0x17, 0x7e, 0xe7, 0xe7, 0x32, 0xac, 0xe8, 0x70, 0xdf, 0x5d, 0x86, 0x09,
		0xd6, 0xa9, 0xc4, 0xa3, 0xbf, 0xc0, 0x5e, 0xce, 0x11, 0xd5, 0x27, 0x20, 0x9b, 0xd0, 0xe1, 0xbf,
		0xc0, 0xa0, 0x54, 0xbf, 0xba, 0x0a, 0x85, 0x40, 0x77, 0x12, 0x0f, 0xff, 0x45, 0x06, 0x0f, 0xa2,
		0xb0, 0xe9, 0xac, 0x3b, 0x89, 0x27, 0xf8, 0x25, 0x6e, 0x3a, 0x43, 0x60, 0xb7, 0xf1, 0xc6, 0x24,
		0x1e, 0xfd, 0xcb, 0xdc, 0xeb, 0x1c, 0x52, 0x7d, 0x1a, 0xf2, 0x7e, 0xb1, 0x89, 0xc7, 0xff, 0x0a,
		0xc3, 0x0f, 0x30, 0xd8, 0x03, 0x81, 0x62, 0x17, 0x4f, 0xf1, 0xab, 0xdc, 0x03, 0x01, 0x14, 0xde,
		0x46, 0xd1, 0x06, 0x26, 0x9e, 0xe9, 0xd7, 0xf8, 0x36, 0x8a, 0xf4, 0x2f, 0x78, 0x35, 0x49, 0xce,
		0x8f, 0xa7, 0xf8, 0x75, 0xbe, 0x9a, 0x44, 0x1f, 0x9b, 0x11, 0xed, 0x08, 0xe2, 0x39, 0x7e, 0x83,
		0x9b, 0x11, 0x69, 0x08, 0xaa, 0xdb, 0x20, 0x0d, 0x77, 0x03, 0xf1, 0x7c, 0x5f, 0x64, 0x7c, 0xd3,
		0x43, 0xcd, 0x40, 0xf5, 0x59, 0x98, 0x1b, 0xdd, 0x09, 0xc4, 0xb3, 0x7e, 0xe9, 0x6e, 0xe4, 0xec,
		0x16, 0x6c, 0x04, 0xaa, 0x3b, 0x83, 0x92, 0x12, 0xec, 0x02, 0xe2, 0x69, 0x5f, 0xbe, 0x1b, 0x4e,
		0xdc, 0xc1, 0x26, 0xa0, 0x5a, 0x03, 0x18, 0x14, 0xe0, 0x78, 0xae, 0x57, 0x18, 0x57, 0x00, 0x84,
		0xb7, 0x06, 0xab, 0xbf, 0xf1, 0xf8, 0x2f, 0xf3, 0xad, 0xc1, 0x10, 0x78, 0x6b, 0xf0, 0xd2, 0x1b,
		0x8f, 0x7e, 0x95, 0x6f, 0x0d, 0x0e, 0xc1, 0x91, 0x1d, 0xa8, 0x6e, 0xf1, 0x0c, 0x5f, 0xe1, 0x91,
		0x1d, 0x40, 0x55, 0xb7, 0x60, 0x7a, 0xa8, 0x20, 0xc6, 0x53, 0x7d, 0x95, 0x51, 0x89, 0xd1, 0x7a,
		0x18, 0x2c, 0x5e, 0xac, 0x18, 0xc6, 0xb3, 0xfd, 0x4e, 0xa4, 0x78, 0xb1, 0x5a, 0x58, 0xbd, 0x0c,
		0x39, 0xb3, 0x6f, 0x18, 0x78, 0xf3, 0x48, 0xc7, 0xff, 0x72, 0xaf, 0xfc, 0x2f, 0xef, 0x33, 0xef,
		0x70, 0x40, 0xf5, 0x22, 0x64, 0x51, 0x6f, 0x0f, 0xb5, 0xe3, 0x90, 0xff, 0xfa, 0x3e, 0x4f, 0x98,
		0x58, 0xbb, 0xfa, 0x34, 0x00, 0xbd, 0x1a, 0x21, 0x9f, 0xfd, 0x62, 0xb0, 0xff, 0xf6, 0x3e, 0xfb,
		0x4d, 0xcd, 0x00, 0x32, 0x20, 0xa0, 0xbf, 0xd0, 0x39, 0x9e, 0xe0, 0x9d, 0x30, 0x01, 0x59, 0x91,
		0xa7, 0x60, 0xe2, 0xaa, 0x6b, 0x99, 0x9e, 0xda, 0x8d, 0x43, 0xff, 0x3b, 0x43, 0x73, 0x7d, 0xec,
		0xb0, 0x9e, 0xe5, 0x20, 0x4f, 0xed, 0xba, 0x71, 0xd8, 0xff, 0x60, 0x58, 0x1f, 0x80, 0xc1, 0x9a,
		0xea, 0x7a, 0x49, 0xe6, 0xfd, 0x9f, 0x1c, 0xcc, 0x01, 0xd8, 0x68, 0xfc, 0xff, 0x35, 0x74, 0x10,
		0x87, 0x7d, 0x97, 0x1b, 0xcd, 0xf4, 0xab, 0x9f, 0x80, 0x3c, 0xfe, 0x97, 0xfe, 0x50, 0x2e, 0x06,
		0xfc, 0x5f, 0x0c, 0x3c, 0x40, 0xe0, 0x37, 0xbb, 0x5e, 0xdb, 0xd3, 0xe3, 0x9d, 0xfd, 0xdf, 0x6c,
		0xa5, 0xb9, 0x7e, 0xb5, 0x06, 0x05, 0xd7, 0x6b, 0xb7, 0xfb, 0xac, 0x3f, 0x8d, 0x81, 0xff, 0xcf,
		0xfb, 0xfe, 0x95, 0x85, 0x8f, 0xc1, 0xab, 0x7d, 0xe3, 0x9a, 0x67, 0x5b, 0xe4, 0x33, 0x47, 0x1c,
		0xc3, 0x5d, 0xc6, 0x10, 0x80, 0xe0, 0xd9, 0x5b, 0x3d, 0xdd, 0x43, 0x3d, 0xdb, 0x8b, 0x75, 0xdd,
		0xff, 0x32, 0xfc, 0x00, 0xb1, 0x52, 0x1f, 0x7d, 0xfb, 0x0b, 0xeb, 0xd6, 0xba, 0x45, 0xef, 0x7d,
		0x5f, 0x58, 0x88, 0xbf, 0xc0, 0x85, 0x37, 0xd2, 0xb0, 0xa0, 0x59, 0xbd, 0x3d, 0xcb, 0x5d, 0x0e,
		0xd4, 0x82, 0x65, 0xff, 0x3d, 0xfc, 0x72, 0xd7, 0x17, 0xcc, 0x9f, 0xec, 0x5a, 0x78, 0xe1, 0x67,
		0x53, 0x90, 0x6f, 0xf6, 0x74, 0xaf, 0x4e, 0xe6, 0xf9, 0x29, 0x98, 0x6c, 0x98, 0x26, 0x72, 0xb6,
		0xd8, 0x66, 0x25, 0xdf, 0x37, 0x0b, 0xe7, 0xe7, 0x97, 0x06, 0x2f, 0xf4, 0x95, 0x97, 0x88, 0xa6,
		0x1c, 0x06, 0x48, 0x1b, 0x20, 0x52, 0x81, 0xe5, 0xf9, 0x24, 0xa9, 0x38, 0x92, 0x95, 0xcc, 0xed,
		0x7f, 0x38, 0x33, 0x26, 0x0f, 0x21, 0xa5, 0x0d, 0x28, 0x11, 0x99, 0xaf, 0xcf, 0x7e, 0xb7, 0x77,
		0x1c, 0x57, 0x0e, 0x73, 0xbd, 0xfe, 0x8f, 0x67, 0x04, 0x39, 0x82, 0x9d, 0x3f, 0x03, 0x59, 0x22,
		0x91, 0xe6, 0x20, 0x7d, 0xc5, 0xb2, 0xc8, 0xe4, 0xd2, 0xec, 0xdd, 0x58, 0xb0, 0xb2, 0x71, 0xfb,
		0x4e, 0x65, 0xec, 0x7b, 0x77, 0x2a, 0x63, 0x7f, 0x77, 0xa7, 0x32, 0xf6, 0xe6, 0x9d, 0x8a, 0xf0,
		0xf6, 0x9d, 0x8a, 0xf0, 0xee, 0x9d, 0x8a, 0xf0, 0xde, 0x9d, 0x8a, 0x70, 0xeb, 0xb0, 0x22, 0xbc,
		0x7e, 0x58, 0x11, 0xbe, 0x7e, 0x58, 0x11, 0xbe, 0x75, 0x58, 0x11, 0xbe, 0x73, 0x58, 0x11, 0x6e,
		0x1f, 0x56, 0xc6, 0xbe, 0x77, 0x58, 0x11, 0xde, 0x3c, 0xac, 0x08, 0x6f, 0x1f, 0x56, 0xc6, 0xde,
		0x3d, 0xac, 0x08, 0xef, 0x1d, 0x56, 0xc6, 0x6e, 0xfd, 0xa0, 0x32, 0xf6, 0x7f, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x5a, 0x12, 0xd3, 0xd9, 0xef, 0x34, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *OmitEmpty) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OmitEmpty)
	if !ok {
		that2, ok := that.(OmitEmpty)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OmitEmpty")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OmitEmpty but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OmitEmpty but is not nil && this == nil")
	}
	if !this.InnerNullable.Equal(that1.InnerNullable) {
		return fmt.Errorf("InnerNullable this(%v) Not Equal that(%v)", this.InnerNullable, that1.InnerNullable)
	}
	if !this.InnerNotNullable.Equal(&that1.InnerNotNullable) {
		return fmt.Errorf("InnerNotNullable this(%v) Not Equal that(%v)", this.InnerNotNullable, that1.InnerNotNullable)
	}
	if !this.InnerOmitEmpty.Equal(&that1.InnerOmitEmpty) {
		return fmt.Errorf("InnerOmitEmpty this(%v) Not Equal that(%v)", this.InnerOmitEmpty, that1.InnerOmitEmpty)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OmitEmpty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OmitEmpty)
	if !ok {
		that2, ok := that.(OmitEmpty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InnerNullable.Equal(that1.InnerNullable) {
		return false
	}
	if !this.InnerNotNullable.Equal(&that1.InnerNotNullable) {
		return false
	}
	if !this.InnerOmitEmpty.Equal(&that1.InnerOmitEmpty) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OmitEmpty_Inner) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OmitEmpty_Inner)
	if !ok {
		that2, ok := that.(OmitEmpty_Inner)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OmitEmpty_Inner")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OmitEmpty_Inner but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OmitEmpty_Inner but is not nil && this == nil")
	}
	if this.Foo != that1.Foo {
		return fmt.Errorf("Foo this(%v) Not Equal that(%v)", this.Foo, that1.Foo)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OmitEmpty_Inner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OmitEmpty_Inner)
	if !ok {
		that2, ok := that.(OmitEmpty_Inner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Foo != that1.Foo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type OmitEmptyFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInnerNullable() *OmitEmpty_Inner
	GetInnerNotNullable() OmitEmpty_Inner
	GetInnerOmitEmpty() OmitEmpty_Inner
}

func (this *OmitEmpty) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *OmitEmpty) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewOmitEmptyFromFace(this)
}

func (this *OmitEmpty) GetInnerNullable() *OmitEmpty_Inner {
	return this.InnerNullable
}

func (this *OmitEmpty) GetInnerNotNullable() OmitEmpty_Inner {
	return this.InnerNotNullable
}

func (this *OmitEmpty) GetInnerOmitEmpty() OmitEmpty_Inner {
	return this.InnerOmitEmpty
}

func NewOmitEmptyFromFace(that OmitEmptyFace) *OmitEmpty {
	this := &OmitEmpty{}
	this.InnerNullable = that.GetInnerNullable()
	this.InnerNotNullable = that.GetInnerNotNullable()
	this.InnerOmitEmpty = that.GetInnerOmitEmpty()
	return this
}

type OmitEmpty_InnerFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetFoo() int64
}

func (this *OmitEmpty_Inner) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *OmitEmpty_Inner) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewOmitEmpty_InnerFromFace(this)
}

func (this *OmitEmpty_Inner) GetFoo() int64 {
	return this.Foo
}

func NewOmitEmpty_InnerFromFace(that OmitEmpty_InnerFace) *OmitEmpty_Inner {
	this := &OmitEmpty_Inner{}
	this.Foo = that.GetFoo()
	return this
}

func (this *OmitEmpty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&omitempty.OmitEmpty{")
	if this.InnerNullable != nil {
		s = append(s, "InnerNullable: "+fmt.Sprintf("%#v", this.InnerNullable)+",\n")
	}
	s = append(s, "InnerNotNullable: "+strings.Replace(this.InnerNotNullable.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "InnerOmitEmpty: "+strings.Replace(this.InnerOmitEmpty.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OmitEmpty_Inner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&omitempty.OmitEmpty_Inner{")
	s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOmitempty(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedOmitEmpty(r randyOmitempty, easy bool) *OmitEmpty {
	this := &OmitEmpty{}
	if r.Intn(5) != 0 {
		this.InnerNullable = NewPopulatedOmitEmpty_Inner(r, easy)
	}
	v1 := NewPopulatedOmitEmpty_Inner(r, easy)
	this.InnerNotNullable = *v1
	v2 := NewPopulatedOmitEmpty_Inner(r, easy)
	this.InnerOmitEmpty = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOmitempty(r, 4)
	}
	return this
}

func NewPopulatedOmitEmpty_Inner(r randyOmitempty, easy bool) *OmitEmpty_Inner {
	this := &OmitEmpty_Inner{}
	this.Foo = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Foo *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOmitempty(r, 2)
	}
	return this
}

type randyOmitempty interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOmitempty(r randyOmitempty) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOmitempty(r randyOmitempty) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneOmitempty(r)
	}
	return string(tmps)
}
func randUnrecognizedOmitempty(r randyOmitempty, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOmitempty(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOmitempty(dAtA []byte, r randyOmitempty, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOmitempty(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *OmitEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InnerNullable != nil {
		l = m.InnerNullable.Size()
		n += 1 + l + sovOmitempty(uint64(l))
	}
	l = m.InnerNotNullable.Size()
	n += 1 + l + sovOmitempty(uint64(l))
	l = m.InnerOmitEmpty.Size()
	n += 1 + l + sovOmitempty(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OmitEmpty_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOmitempty(uint64(m.Foo))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOmitempty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOmitempty(x uint64) (n int) {
	return sovOmitempty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OmitEmpty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OmitEmpty{`,
		`InnerNullable:` + strings.Replace(fmt.Sprintf("%v", this.InnerNullable), "OmitEmpty_Inner", "OmitEmpty_Inner", 1) + `,`,
		`InnerNotNullable:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.InnerNotNullable), "OmitEmpty_Inner", "OmitEmpty_Inner", 1), `&`, ``, 1) + `,`,
		`InnerOmitEmpty:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.InnerOmitEmpty), "OmitEmpty_Inner", "OmitEmpty_Inner", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OmitEmpty_Inner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OmitEmpty_Inner{`,
		`Foo:` + fmt.Sprintf("%v", this.Foo) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOmitempty(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OmitEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmitempty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OmitEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OmitEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerNullable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmitempty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmitempty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerNullable == nil {
				m.InnerNullable = &OmitEmpty_Inner{}
			}
			if err := m.InnerNullable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerNotNullable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmitempty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmitempty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InnerNotNullable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerOmitEmpty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmitempty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmitempty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InnerOmitEmpty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmitempty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmitempty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OmitEmpty_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmitempty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			m.Foo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Foo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmitempty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmitempty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOmitempty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOmitempty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmitempty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOmitempty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOmitempty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOmitempty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOmitempty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOmitempty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOmitempty = fmt.Errorf("proto: unexpected end of group")
)
