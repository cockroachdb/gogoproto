// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/marshaler/omitempty.proto

package omitempty

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OmitEmpty struct {
	InnerNullable        *OmitEmpty_Inner `protobuf:"bytes,1,opt,name=InnerNullable" json:"InnerNullable,omitempty"`
	InnerNotNullable     OmitEmpty_Inner  `protobuf:"bytes,2,opt,name=InnerNotNullable" json:"InnerNotNullable"`
	InnerOmitEmpty       OmitEmpty_Inner  `protobuf:"bytes,3,opt,name=InnerOmitEmpty" json:"InnerOmitEmpty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OmitEmpty) Reset()      { *m = OmitEmpty{} }
func (*OmitEmpty) ProtoMessage() {}
func (*OmitEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_21143c33ceb8d93e, []int{0}
}
func (m *OmitEmpty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OmitEmpty.Unmarshal(m, b)
}
func (m *OmitEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OmitEmpty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OmitEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmitEmpty.Merge(m, src)
}
func (m *OmitEmpty) XXX_Size() int {
	return m.Size()
}
func (m *OmitEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_OmitEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_OmitEmpty proto.InternalMessageInfo

type OmitEmpty_Inner struct {
	Foo                  int64    `protobuf:"varint,1,opt,name=Foo" json:"Foo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OmitEmpty_Inner) Reset()      { *m = OmitEmpty_Inner{} }
func (*OmitEmpty_Inner) ProtoMessage() {}
func (*OmitEmpty_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_21143c33ceb8d93e, []int{0, 0}
}
func (m *OmitEmpty_Inner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OmitEmpty_Inner.Unmarshal(m, b)
}
func (m *OmitEmpty_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OmitEmpty_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OmitEmpty_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OmitEmpty_Inner.Merge(m, src)
}
func (m *OmitEmpty_Inner) XXX_Size() int {
	return m.Size()
}
func (m *OmitEmpty_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_OmitEmpty_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_OmitEmpty_Inner proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OmitEmpty)(nil), "omitempty.OmitEmpty")
	proto.RegisterType((*OmitEmpty_Inner)(nil), "omitempty.OmitEmpty.Inner")
}

func init() { proto.RegisterFile("combos/marshaler/omitempty.proto", fileDescriptor_21143c33ceb8d93e) }

var fileDescriptor_21143c33ceb8d93e = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0xef, 0xb5, 0x0a, 0xf6, 0x44, 0x91, 0x0c, 0x52, 0x3a, 0xbc, 0x14, 0x27, 0x17, 0x13,
	0xf0, 0x13, 0x48, 0x41, 0x41, 0x08, 0x0a, 0xf9, 0x06, 0x49, 0x89, 0x69, 0x20, 0xd7, 0x57, 0xd2,
	0xcb, 0xe0, 0xd6, 0xd9, 0x4f, 0xd2, 0xd1, 0xd1, 0xd1, 0x31, 0x63, 0x47, 0x27, 0xed, 0x3d, 0x97,
	0x8e, 0x1d, 0x3b, 0x4a, 0xae, 0x12, 0x51, 0x87, 0x6e, 0xf7, 0x7e, 0xfc, 0x7f, 0xff, 0x3f, 0x27,
	0xfb, 0x43, 0x52, 0x31, 0x4d, 0x7d, 0x15, 0x15, 0xd3, 0x51, 0x94, 0x27, 0x85, 0x4f, 0x2a, 0xd3,
	0x89, 0x9a, 0xe8, 0x47, 0x6f, 0x52, 0x90, 0x26, 0xa7, 0xd3, 0x80, 0xde, 0x45, 0x9a, 0xe9, 0x51,
	0x19, 0x7b, 0x43, 0x52, 0x7e, 0x4a, 0x29, 0xf9, 0x36, 0x11, 0x97, 0x0f, 0xf6, 0xb2, 0x87, 0x7d,
	0x6d, 0xcd, 0xb3, 0xa7, 0x96, 0xec, 0xdc, 0xab, 0x4c, 0x5f, 0xd7, 0xb2, 0x73, 0x25, 0x8f, 0x6e,
	0xc7, 0xe3, 0xa4, 0xb8, 0x2b, 0xf3, 0x3c, 0x8a, 0xf3, 0xa4, 0x0b, 0x7d, 0x38, 0x3f, 0xbc, 0xec,
	0x79, 0x3f, 0x83, 0x4d, 0xd8, 0xb3, 0xc9, 0xf0, 0xb7, 0xe0, 0x04, 0xf2, 0x64, 0x0b, 0x48, 0x37,
	0x25, 0xad, 0x5d, 0x25, 0x83, 0xbd, 0xea, 0xdd, 0x15, 0xe1, 0x3f, 0xd3, 0x09, 0xe4, 0xb1, 0x65,
	0x4d, 0xbe, 0xdb, 0xde, 0xd9, 0x75, 0x50, 0x77, 0xcd, 0x3f, 0x5c, 0x08, 0xff, 0xb8, 0x3d, 0x57,
	0xee, 0x5b, 0xe2, 0x9c, 0xca, 0xf6, 0x0d, 0x91, 0xfd, 0x5c, 0xfb, 0x7b, 0xbb, 0x06, 0x83, 0xa0,
	0x32, 0x28, 0x16, 0x06, 0xc5, 0x9b, 0x41, 0xb1, 0x34, 0x08, 0x2b, 0x83, 0xb0, 0x36, 0x08, 0x1b,
	0x83, 0x30, 0x63, 0x84, 0x39, 0x23, 0x3c, 0x33, 0xc2, 0x0b, 0x23, 0xbc, 0x32, 0x42, 0xc5, 0x08,
	0x0b, 0x46, 0xb1, 0x64, 0x84, 0x15, 0xa3, 0x58, 0x33, 0xc2, 0x86, 0x51, 0xcc, 0x3e, 0x51, 0x7c,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x9a, 0x02, 0x9e, 0xb7, 0x01, 0x00, 0x00,
}

func (this *OmitEmpty) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OmitemptyDescription()
}
func (this *OmitEmpty_Inner) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OmitemptyDescription()
}
func OmitemptyDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4008 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x70, 0xe3, 0xe6,
		0x75, 0x16, 0x78, 0x91, 0xc8, 0x43, 0x8a, 0x82, 0x20, 0x59, 0xcb, 0x95, 0x63, 0xee, 0xae, 0x6c,
		0xc7, 0xb2, 0x1d, 0x4b, 0x99, 0xf5, 0xee, 0xda, 0xe6, 0x36, 0x71, 0x28, 0x89, 0xab, 0xd0, 0x95,
		0x44, 0x05, 0x94, 0xe2, 0x4b, 0xa6, 0x83, 0x81, 0xc0, 0x9f, 0x14, 0x76, 0x41, 0x00, 0x01, 0xc0,
		0x5d, 0x6b, 0xa7, 0x0f, 0xdb, 0x71, 0x2f, 0x93, 0xde, 0x6f, 0x33, 0x4d, 0x5c, 0xc7, 0x6d, 0xd2,
		0x69, 0xed, 0xa6, 0xb7, 0xa4, 0x97, 0xdc, 0xfa, 0x92, 0x97, 0xb4, 0xfb, 0xd4, 0x49, 0xde, 0xfa,
		0xd0, 0x69, 0xbd, 0x8a, 0x3b, 0x75, 0x5b, 0xb7, 0x75, 0xdb, 0xed, 0x8c, 0x67, 0xfc, 0xd2, 0xf9,
		0x6f, 0x20, 0x00, 0x52, 0x02, 0x94, 0x19, 0x3b, 0x4f, 0x12, 0xce, 0x7f, 0xbe, 0x0f, 0xe7, 0x3f,
		0xff, 0xf9, 0xcf, 0x39, 0xff, 0x0f, 0xc2, 0xed, 0x2a, 0x9c, 0xed, 0x5a, 0x56, 0xd7, 0x40, 0xcb,
		0xb6, 0x63, 0x79, 0xd6, 0x5e, 0xbf, 0xb3, 0xdc, 0x46, 0xae, 0xe6, 0xe8, 0xb6, 0x67, 0x39, 0x4b,
		0x44, 0x26, 0x4d, 0x51, 0x8d, 0x25, 0xae, 0xb1, 0xb0, 0x09, 0xd3, 0x57, 0x74, 0x03, 0xad, 0xf9,
		0x8a, 0x2d, 0xe4, 0x49, 0x4f, 0x42, 0xa6, 0xa3, 0x1b, 0xa8, 0x2c, 0x9c, 0x4d, 0x2f, 0x16, 0xce,
		0x3f, 0xb0, 0x14, 0x01, 0x2d, 0x85, 0x11, 0xdb, 0x58, 0x2c, 0x13, 0xc4, 0xc2, 0x9b, 0x19, 0x98,
		0x19, 0x31, 0x2a, 0x49, 0x90, 0x31, 0xd5, 0x1e, 0x66, 0x14, 0x16, 0xf3, 0x32, 0xf9, 0x5f, 0x2a,
		0xc3, 0x84, 0xad, 0x6a, 0xd7, 0xd4, 0x2e, 0x2a, 0xa7, 0x88, 0x98, 0x3f, 0x4a, 0x15, 0x80, 0x36,
		0xb2, 0x91, 0xd9, 0x46, 0xa6, 0x76, 0x50, 0x4e, 0x9f, 0x4d, 0x2f, 0xe6, 0xe5, 0x80, 0x44, 0x7a,
		0x14, 0xa6, 0xed, 0xfe, 0x9e, 0xa1, 0x6b, 0x4a, 0x40, 0x0d, 0xce, 0xa6, 0x17, 0xb3, 0xb2, 0x48,
		0x07, 0xd6, 0x06, 0xca, 0x0f, 0xc1, 0xd4, 0x0d, 0xa4, 0x5e, 0x0b, 0xaa, 0x16, 0x88, 0x6a, 0x09,
		0x8b, 0x03, 0x8a, 0xab, 0x50, 0xec, 0x21, 0xd7, 0x55, 0xbb, 0x48, 0xf1, 0x0e, 0x6c, 0x54, 0xce,
		0x90, 0xd9, 0x9f, 0x1d, 0x9a, 0x7d, 0x74, 0xe6, 0x05, 0x86, 0xda, 0x39, 0xb0, 0x91, 0x54, 0x83,
		0x3c, 0x32, 0xfb, 0x3d, 0xca, 0x90, 0x3d, 0xc2, 0x7f, 0x75, 0xb3, 0xdf, 0x8b, 0xb2, 0xe4, 0x30,
		0x8c, 0x51, 0x4c, 0xb8, 0xc8, 0xb9, 0xae, 0x6b, 0xa8, 0x3c, 0x4e, 0x08, 0x1e, 0x1a, 0x22, 0x68,
		0xd1, 0xf1, 0x28, 0x07, 0xc7, 0x49, 0xab, 0x90, 0x47, 0x2f, 0x7a, 0xc8, 0x74, 0x75, 0xcb, 0x2c,
		0x4f, 0x10, 0x92, 0x07, 0x47, 0xac, 0x22, 0x32, 0xda, 0x51, 0x8a, 0x01, 0x4e, 0xba, 0x04, 0x13,
		0x96, 0xed, 0xe9, 0x96, 0xe9, 0x96, 0x73, 0x67, 0x85, 0xc5, 0xc2, 0xf9, 0x0f, 0x8d, 0x0c, 0x84,
		0x26, 0xd5, 0x91, 0xb9, 0xb2, 0xd4, 0x00, 0xd1, 0xb5, 0xfa, 0x8e, 0x86, 0x14, 0xcd, 0x6a, 0x23,
		0x45, 0x37, 0x3b, 0x56, 0x39, 0x4f, 0x08, 0xce, 0x0c, 0x4f, 0x84, 0x28, 0xae, 0x5a, 0x6d, 0xd4,
		0x30, 0x3b, 0x96, 0x5c, 0x72, 0x43, 0xcf, 0xd2, 0x1c, 0x8c, 0xbb, 0x07, 0xa6, 0xa7, 0xbe, 0x58,
		0x2e, 0x92, 0x08, 0x61, 0x4f, 0x0b, 0xdf, 0x1a, 0x87, 0xa9, 0x24, 0x21, 0x76, 0x19, 0xb2, 0x1d,
		0x3c, 0xcb, 0x72, 0xea, 0x24, 0x3e, 0xa0, 0x98, 0xb0, 0x13, 0xc7, 0x7f, 0x48, 0x27, 0xd6, 0xa0,
		0x60, 0x22, 0xd7, 0x43, 0x6d, 0x1a, 0x11, 0xe9, 0x84, 0x31, 0x05, 0x14, 0x34, 0x1c, 0x52, 0x99,
		0x1f, 0x2a, 0xa4, 0x9e, 0x83, 0x29, 0xdf, 0x24, 0xc5, 0x51, 0xcd, 0x2e, 0x8f, 0xcd, 0xe5, 0x38,
		0x4b, 0x96, 0xea, 0x1c, 0x27, 0x63, 0x98, 0x5c, 0x42, 0xa1, 0x67, 0x69, 0x0d, 0xc0, 0x32, 0x91,
		0xd5, 0x51, 0xda, 0x48, 0x33, 0xca, 0xb9, 0x23, 0xbc, 0xd4, 0xc4, 0x2a, 0x43, 0x5e, 0xb2, 0xa8,
		0x54, 0x33, 0xa4, 0xa7, 0x06, 0xa1, 0x36, 0x71, 0x44, 0xa4, 0x6c, 0xd2, 0x4d, 0x36, 0x14, 0x6d,
		0xbb, 0x50, 0x72, 0x10, 0x8e, 0x7b, 0xd4, 0x66, 0x33, 0xcb, 0x13, 0x23, 0x96, 0x62, 0x67, 0x26,
		0x33, 0x18, 0x9d, 0xd8, 0xa4, 0x13, 0x7c, 0x94, 0xee, 0x07, 0x5f, 0xa0, 0x90, 0xb0, 0x02, 0x92,
		0x85, 0x8a, 0x5c, 0xb8, 0xa5, 0xf6, 0xd0, 0xfc, 0x4d, 0x28, 0x85, 0xdd, 0x23, 0xcd, 0x42, 0xd6,
		0xf5, 0x54, 0xc7, 0x23, 0x51, 0x98, 0x95, 0xe9, 0x83, 0x24, 0x42, 0x1a, 0x99, 0x6d, 0x92, 0xe5,
		0xb2, 0x32, 0xfe, 0x57, 0xfa, 0xc4, 0x60, 0xc2, 0x69, 0x32, 0xe1, 0x0f, 0x0f, 0xaf, 0x68, 0x88,
		0x39, 0x3a, 0xef, 0xf9, 0x27, 0x60, 0x32, 0x34, 0x81, 0xa4, 0xaf, 0x5e, 0xf8, 0x49, 0xb8, 0x67,
		0x24, 0xb5, 0xf4, 0x1c, 0xcc, 0xf6, 0x4d, 0xdd, 0xf4, 0x90, 0x63, 0x3b, 0x08, 0x47, 0x2c, 0x7d,
		0x55, 0xf9, 0x5f, 0x26, 0x8e, 0x88, 0xb9, 0xdd, 0xa0, 0x36, 0x65, 0x91, 0x67, 0xfa, 0xc3, 0xc2,
		0x47, 0xf2, 0xb9, 0xb7, 0x26, 0xc4, 0x5b, 0xb7, 0x6e, 0xdd, 0x4a, 0x2d, 0x7c, 0x7e, 0x1c, 0x66,
		0x47, 0xed, 0x99, 0x91, 0xdb, 0x77, 0x0e, 0xc6, 0xcd, 0x7e, 0x6f, 0x0f, 0x39, 0xc4, 0x49, 0x59,
		0x99, 0x3d, 0x49, 0x35, 0xc8, 0x1a, 0xea, 0x1e, 0x32, 0xca, 0x99, 0xb3, 0xc2, 0x62, 0xe9, 0xfc,
		0xa3, 0x89, 0x76, 0xe5, 0xd2, 0x06, 0x86, 0xc8, 0x14, 0x29, 0x7d, 0x1c, 0x32, 0x2c, 0x45, 0x63,
		0x86, 0x47, 0x92, 0x31, 0xe0, 0xbd, 0x24, 0x13, 0x9c, 0x74, 0x2f, 0xe4, 0xf1, 0x5f, 0x1a, 0x1b,
		0xe3, 0xc4, 0xe6, 0x1c, 0x16, 0xe0, 0xb8, 0x90, 0xe6, 0x21, 0x47, 0xb6, 0x49, 0x1b, 0xf1, 0xd2,
		0xe6, 0x3f, 0xe3, 0xc0, 0x6a, 0xa3, 0x8e, 0xda, 0x37, 0x3c, 0xe5, 0xba, 0x6a, 0xf4, 0x11, 0x09,
		0xf8, 0xbc, 0x5c, 0x64, 0xc2, 0x4f, 0x63, 0x99, 0x74, 0x06, 0x0a, 0x74, 0x57, 0xe9, 0x66, 0x1b,
		0xbd, 0x48, 0xb2, 0x67, 0x56, 0xa6, 0x1b, 0xad, 0x81, 0x25, 0xf8, 0xf5, 0x57, 0x5d, 0xcb, 0xe4,
		0xa1, 0x49, 0x5e, 0x81, 0x05, 0xe4, 0xf5, 0x4f, 0x44, 0x13, 0xf7, 0x7d, 0xa3, 0xa7, 0x17, 0x8d,
		0xa9, 0x85, 0xaf, 0xa7, 0x20, 0x43, 0xf2, 0xc5, 0x14, 0x14, 0x76, 0x9e, 0xdf, 0xae, 0x2b, 0x6b,
		0xcd, 0xdd, 0x95, 0x8d, 0xba, 0x28, 0x48, 0x25, 0x00, 0x22, 0xb8, 0xb2, 0xd1, 0xac, 0xed, 0x88,
		0x29, 0xff, 0xb9, 0xb1, 0xb5, 0x73, 0xe9, 0x82, 0x98, 0xf6, 0x01, 0xbb, 0x54, 0x90, 0x09, 0x2a,
		0x3c, 0x7e, 0x5e, 0xcc, 0x4a, 0x22, 0x14, 0x29, 0x41, 0xe3, 0xb9, 0xfa, 0xda, 0xa5, 0x0b, 0xe2,
		0x78, 0x58, 0xf2, 0xf8, 0x79, 0x71, 0x42, 0x9a, 0x84, 0x3c, 0x91, 0xac, 0x34, 0x9b, 0x1b, 0x62,
		0xce, 0xe7, 0x6c, 0xed, 0xc8, 0x8d, 0xad, 0x75, 0x31, 0xef, 0x73, 0xae, 0xcb, 0xcd, 0xdd, 0x6d,
		0x11, 0x7c, 0x86, 0xcd, 0x7a, 0xab, 0x55, 0x5b, 0xaf, 0x8b, 0x05, 0x5f, 0x63, 0xe5, 0xf9, 0x9d,
		0x7a, 0x4b, 0x2c, 0x86, 0xcc, 0x7a, 0xfc, 0xbc, 0x38, 0xe9, 0xbf, 0xa2, 0xbe, 0xb5, 0xbb, 0x29,
		0x96, 0xa4, 0x69, 0x98, 0xa4, 0xaf, 0xe0, 0x46, 0x4c, 0x45, 0x44, 0x97, 0x2e, 0x88, 0xe2, 0xc0,
		0x10, 0xca, 0x32, 0x1d, 0x12, 0x5c, 0xba, 0x20, 0x4a, 0x0b, 0xab, 0x90, 0x25, 0xd1, 0x25, 0x49,
		0x50, 0xda, 0xa8, 0xad, 0xd4, 0x37, 0x94, 0xe6, 0xf6, 0x4e, 0xa3, 0xb9, 0x55, 0xdb, 0x10, 0x85,
		0x81, 0x4c, 0xae, 0x7f, 0x6a, 0xb7, 0x21, 0xd7, 0xd7, 0xc4, 0x54, 0x50, 0xb6, 0x5d, 0xaf, 0xed,
		0xd4, 0xd7, 0xc4, 0xf4, 0x82, 0x06, 0xb3, 0xa3, 0xf2, 0xe4, 0xc8, 0x9d, 0x11, 0x58, 0xe2, 0xd4,
		0x11, 0x4b, 0x4c, 0xb8, 0x86, 0x96, 0xf8, 0x07, 0x29, 0x98, 0x19, 0x51, 0x2b, 0x46, 0xbe, 0xe4,
		0x69, 0xc8, 0xd2, 0x10, 0xa5, 0xd5, 0xf3, 0xe1, 0x91, 0x45, 0x87, 0x04, 0xec, 0x50, 0x05, 0x25,
		0xb8, 0x60, 0x07, 0x91, 0x3e, 0xa2, 0x83, 0xc0, 0x14, 0x43, 0x39, 0xfd, 0x27, 0x86, 0x72, 0x3a,
		0x2d, 0x7b, 0x97, 0x92, 0x94, 0x3d, 0x22, 0x3b, 0x59, 0x6e, 0xcf, 0x8e, 0xc8, 0xed, 0x97, 0x61,
		0x7a, 0x88, 0x28, 0x71, 0x8e, 0x7d, 0x49, 0x80, 0xf2, 0x51, 0xce, 0x89, 0xc9, 0x74, 0xa9, 0x50,
		0xa6, 0xbb, 0x1c, 0xf5, 0xe0, 0xb9, 0xa3, 0x17, 0x61, 0x68, 0xad, 0x5f, 0x13, 0x60, 0x6e, 0x74,
		0xa7, 0x38, 0xd2, 0x86, 0x8f, 0xc3, 0x78, 0x0f, 0x79, 0xfb, 0x16, 0xef, 0x96, 0x3e, 0x3c, 0xa2,
		0x06, 0xe3, 0xe1, 0xe8, 0x62, 0x33, 0x54, 0xb0, 0x88, 0xa7, 0x8f, 0x6a, 0xf7, 0xa8, 0x35, 0x43,
		0x96, 0x7e, 0x2e, 0x05, 0xf7, 0x8c, 0x24, 0x1f, 0x69, 0xe8, 0x7d, 0x00, 0xba, 0x69, 0xf7, 0x3d,
		0xda, 0x11, 0xd1, 0x04, 0x9b, 0x27, 0x12, 0x92, 0xbc, 0x70, 0xf2, 0xec, 0x7b, 0xfe, 0x78, 0x9a,
		0x8c, 0x03, 0x15, 0x11, 0x85, 0x27, 0x07, 0x86, 0x66, 0x88, 0xa1, 0x95, 0x23, 0x66, 0x3a, 0x14,
		0x98, 0x1f, 0x05, 0x51, 0x33, 0x74, 0x64, 0x7a, 0x8a, 0xeb, 0x39, 0x48, 0xed, 0xe9, 0x66, 0x97,
		0x54, 0x90, 0x5c, 0x35, 0xdb, 0x51, 0x0d, 0x17, 0xc9, 0x53, 0x74, 0xb8, 0xc5, 0x47, 0x31, 0x82,
		0x04, 0x90, 0x13, 0x40, 0x8c, 0x87, 0x10, 0x74, 0xd8, 0x47, 0x2c, 0xfc, 0x62, 0x1e, 0x0a, 0x81,
		0xbe, 0x5a, 0x3a, 0x07, 0xc5, 0xab, 0xea, 0x75, 0x55, 0xe1, 0x67, 0x25, 0xea, 0x89, 0x02, 0x96,
		0x6d, 0xb3, 0xf3, 0xd2, 0x47, 0x61, 0x96, 0xa8, 0x58, 0x7d, 0x0f, 0x39, 0x8a, 0x66, 0xa8, 0xae,
		0x4b, 0x9c, 0x96, 0x23, 0xaa, 0x12, 0x1e, 0x6b, 0xe2, 0xa1, 0x55, 0x3e, 0x22, 0x5d, 0x84, 0x19,
		0x82, 0xe8, 0xf5, 0x0d, 0x4f, 0xb7, 0x0d, 0xa4, 0xe0, 0xd3, 0x9b, 0x4b, 0x2a, 0x89, 0x6f, 0xd9,
		0x34, 0xd6, 0xd8, 0x64, 0x0a, 0xd8, 0x22, 0x57, 0x5a, 0x83, 0xfb, 0x08, 0xac, 0x8b, 0x4c, 0xe4,
		0xa8, 0x1e, 0x52, 0xd0, 0x67, 0xfb, 0xaa, 0xe1, 0x2a, 0xaa, 0xd9, 0x56, 0xf6, 0x55, 0x77, 0xbf,
		0x3c, 0x8b, 0x09, 0x56, 0x52, 0x65, 0x41, 0x3e, 0x8d, 0x15, 0xd7, 0x99, 0x5e, 0x9d, 0xa8, 0xd5,
		0xcc, 0xf6, 0x27, 0x55, 0x77, 0x5f, 0xaa, 0xc2, 0x1c, 0x61, 0x71, 0x3d, 0x47, 0x37, 0xbb, 0x8a,
		0xb6, 0x8f, 0xb4, 0x6b, 0x4a, 0xdf, 0xeb, 0x3c, 0x59, 0xbe, 0x37, 0xf8, 0x7e, 0x62, 0x61, 0x8b,
		0xe8, 0xac, 0x62, 0x95, 0x5d, 0xaf, 0xf3, 0xa4, 0xd4, 0x82, 0x22, 0x5e, 0x8c, 0x9e, 0x7e, 0x13,
		0x29, 0x1d, 0xcb, 0x21, 0xa5, 0xb1, 0x34, 0x22, 0x35, 0x05, 0x3c, 0xb8, 0xd4, 0x64, 0x80, 0x4d,
		0xab, 0x8d, 0xaa, 0xd9, 0xd6, 0x76, 0xbd, 0xbe, 0x26, 0x17, 0x38, 0xcb, 0x15, 0xcb, 0xc1, 0x01,
		0xd5, 0xb5, 0x7c, 0x07, 0x17, 0x68, 0x40, 0x75, 0x2d, 0xee, 0xde, 0x8b, 0x30, 0xa3, 0x69, 0x74,
		0xce, 0xba, 0xa6, 0xb0, 0x33, 0x96, 0x5b, 0x16, 0x43, 0xce, 0xd2, 0xb4, 0x75, 0xaa, 0xc0, 0x62,
		0xdc, 0x95, 0x9e, 0x82, 0x7b, 0x06, 0xce, 0x0a, 0x02, 0xa7, 0x87, 0x66, 0x19, 0x85, 0x5e, 0x84,
		0x19, 0xfb, 0x60, 0x18, 0x28, 0x85, 0xde, 0x68, 0x1f, 0x44, 0x61, 0x4f, 0xc0, 0xac, 0xbd, 0x6f,
		0x0f, 0xe3, 0x1e, 0x09, 0xe2, 0x24, 0x7b, 0xdf, 0x8e, 0x02, 0x1f, 0x24, 0x07, 0x6e, 0x07, 0x69,
		0xaa, 0x87, 0xda, 0xe5, 0x53, 0x41, 0xf5, 0xc0, 0x80, 0xb4, 0x0c, 0xa2, 0xa6, 0x29, 0xc8, 0x54,
		0xf7, 0x0c, 0xa4, 0xa8, 0x0e, 0x32, 0x55, 0xb7, 0x7c, 0x26, 0xa8, 0x5c, 0xd2, 0xb4, 0x3a, 0x19,
		0xad, 0x91, 0x41, 0xe9, 0x11, 0x98, 0xb6, 0xf6, 0xae, 0x6a, 0x34, 0x24, 0x15, 0xdb, 0x41, 0x1d,
		0xfd, 0xc5, 0xf2, 0x03, 0xc4, 0xbf, 0x53, 0x78, 0x80, 0x04, 0xe4, 0x36, 0x11, 0x4b, 0x0f, 0x83,
		0xa8, 0xb9, 0xfb, 0xaa, 0x63, 0x93, 0x9c, 0xec, 0xda, 0xaa, 0x86, 0xca, 0x0f, 0x52, 0x55, 0x2a,
		0xdf, 0xe2, 0x62, 0xbc, 0x25, 0xdc, 0x1b, 0x7a, 0xc7, 0xe3, 0x8c, 0x0f, 0xd1, 0x2d, 0x41, 0x64,
		0x8c, 0x6d, 0x11, 0x44, 0xec, 0x8a, 0xd0, 0x8b, 0x17, 0x89, 0x5a, 0xc9, 0xde, 0xb7, 0x83, 0xef,
		0xbd, 0x1f, 0x26, 0xb1, 0xe6, 0xe0, 0xa5, 0x0f, 0xd3, 0x86, 0xcc, 0xde, 0x0f, 0xbc, 0xf1, 0x02,
		0xcc, 0x61, 0xa5, 0x1e, 0xf2, 0xd4, 0xb6, 0xea, 0xa9, 0x01, 0xed, 0x8f, 0x10, 0x6d, 0xec, 0xf7,
		0x4d, 0x36, 0x18, 0xb2, 0xd3, 0xe9, 0xef, 0x1d, 0xf8, 0x91, 0xf5, 0x18, 0xb5, 0x13, 0xcb, 0x78,
		0x6c, 0xbd, 0x6f, 0x4d, 0xf7, 0x42, 0x15, 0x8a, 0xc1, 0xc0, 0x97, 0xf2, 0x40, 0x43, 0x5f, 0x14,
		0x70, 0x17, 0xb4, 0xda, 0x5c, 0xc3, 0xfd, 0xcb, 0x0b, 0x75, 0x31, 0x85, 0xfb, 0xa8, 0x8d, 0xc6,
		0x4e, 0x5d, 0x91, 0x77, 0xb7, 0x76, 0x1a, 0x9b, 0x75, 0x31, 0x1d, 0x6c, 0xd8, 0xbf, 0x9b, 0x82,
		0x52, 0xf8, 0xec, 0x25, 0xfd, 0x18, 0x9c, 0xe2, 0x17, 0x25, 0x2e, 0xf2, 0x94, 0x1b, 0xba, 0x43,
		0xf6, 0x62, 0x4f, 0xa5, 0x75, 0xd1, 0x8f, 0x86, 0x59, 0xa6, 0xd5, 0x42, 0xde, 0xb3, 0xba, 0x83,
		0x77, 0x5a, 0x4f, 0xf5, 0xa4, 0x0d, 0x38, 0x63, 0x5a, 0x8a, 0xeb, 0xa9, 0x66, 0x5b, 0x75, 0xda,
		0xca, 0xe0, 0x8a, 0x4a, 0x51, 0x35, 0x0d, 0xb9, 0xae, 0x45, 0x6b, 0xa0, 0xcf, 0xf2, 0x21, 0xd3,
		0x6a, 0x31, 0xe5, 0x41, 0x71, 0xa8, 0x31, 0xd5, 0x48, 0xe4, 0xa6, 0x8f, 0x8a, 0xdc, 0x7b, 0x21,
		0xdf, 0x53, 0x6d, 0x05, 0x99, 0x9e, 0x73, 0x40, 0x3a, 0xee, 0x9c, 0x9c, 0xeb, 0xa9, 0x76, 0x1d,
		0x3f, 0x7f, 0x30, 0x07, 0x9f, 0x7f, 0x48, 0x43, 0x31, 0xd8, 0x75, 0xe3, 0x43, 0x8c, 0x46, 0x0a,
		0x94, 0x40, 0x52, 0xd8, 0xfd, 0xc7, 0xf6, 0xe8, 0x4b, 0xab, 0xb8, 0x72, 0x55, 0xc7, 0x69, 0x2f,
		0x2c, 0x53, 0x24, 0xee, 0x1a, 0x70, 0x68, 0x21, 0xda, 0x7b, 0xe4, 0x64, 0xf6, 0x24, 0xad, 0xc3,
		0xf8, 0x55, 0x97, 0x70, 0x8f, 0x13, 0xee, 0x07, 0x8e, 0xe7, 0x7e, 0xa6, 0x45, 0xc8, 0xf3, 0xcf,
		0xb4, 0x94, 0xad, 0xa6, 0xbc, 0x59, 0xdb, 0x90, 0x19, 0x5c, 0x3a, 0x0d, 0x19, 0x43, 0xbd, 0x79,
		0x10, 0xae, 0x71, 0x44, 0x94, 0xd4, 0xf1, 0xa7, 0x21, 0x73, 0x03, 0xa9, 0xd7, 0xc2, 0x95, 0x85,
		0x88, 0xde, 0xc7, 0xd0, 0x5f, 0x86, 0x2c, 0xf1, 0x97, 0x04, 0xc0, 0x3c, 0x26, 0x8e, 0x49, 0x39,
		0xc8, 0xac, 0x36, 0x65, 0x1c, 0xfe, 0x22, 0x14, 0xa9, 0x54, 0xd9, 0x6e, 0xd4, 0x57, 0xeb, 0x62,
		0x6a, 0xe1, 0x22, 0x8c, 0x53, 0x27, 0xe0, 0xad, 0xe1, 0xbb, 0x41, 0x1c, 0x63, 0x8f, 0x8c, 0x43,
		0xe0, 0xa3, 0xbb, 0x9b, 0x2b, 0x75, 0x59, 0x4c, 0x05, 0x97, 0xd7, 0x85, 0x62, 0xb0, 0xe1, 0xfe,
		0x60, 0x62, 0xea, 0xdb, 0x02, 0x14, 0x02, 0x0d, 0x34, 0xee, 0x7c, 0x54, 0xc3, 0xb0, 0x6e, 0x28,
		0xaa, 0xa1, 0xab, 0x2e, 0x0b, 0x0a, 0x20, 0xa2, 0x1a, 0x96, 0x24, 0x5d, 0xb4, 0x0f, 0xc4, 0xf8,
		0x57, 0x05, 0x10, 0xa3, 0xbd, 0x6b, 0xc4, 0x40, 0xe1, 0x47, 0x6a, 0xe0, 0x2b, 0x02, 0x94, 0xc2,
		0x0d, 0x6b, 0xc4, 0xbc, 0x73, 0x3f, 0x52, 0xf3, 0xde, 0x48, 0xc1, 0x64, 0xa8, 0x4d, 0x4d, 0x6a,
		0xdd, 0x67, 0x61, 0x5a, 0x6f, 0xa3, 0x9e, 0x6d, 0x79, 0xc8, 0xd4, 0x0e, 0x14, 0x03, 0x5d, 0x47,
		0x46, 0x79, 0x81, 0x24, 0x8a, 0xe5, 0xe3, 0x1b, 0xe1, 0xa5, 0xc6, 0x00, 0xb7, 0x81, 0x61, 0xd5,
		0x99, 0xc6, 0x5a, 0x7d, 0x73, 0xbb, 0xb9, 0x53, 0xdf, 0x5a, 0x7d, 0x5e, 0xd9, 0xdd, 0xfa, 0xf1,
		0xad, 0xe6, 0xb3, 0x5b, 0xb2, 0xa8, 0x47, 0xd4, 0xde, 0xc7, 0xad, 0xbe, 0x0d, 0x62, 0xd4, 0x28,
		0xe9, 0x14, 0x8c, 0x32, 0x4b, 0x1c, 0x93, 0x66, 0x60, 0x6a, 0xab, 0xa9, 0xb4, 0x1a, 0x6b, 0x75,
		0xa5, 0x7e, 0xe5, 0x4a, 0x7d, 0x75, 0xa7, 0x45, 0xaf, 0x36, 0x7c, 0xed, 0x9d, 0xf0, 0xa6, 0x7e,
		0x39, 0x0d, 0x33, 0x23, 0x2c, 0x91, 0x6a, 0xec, 0x50, 0x42, 0xcf, 0x49, 0x8f, 0x25, 0xb1, 0x7e,
		0x09, 0x77, 0x05, 0xdb, 0xaa, 0xe3, 0xb1, 0x33, 0xcc, 0xc3, 0x80, 0xbd, 0x64, 0x7a, 0x7a, 0x47,
		0x47, 0x0e, 0xbb, 0x09, 0xa2, 0x27, 0x95, 0xa9, 0x81, 0x9c, 0x5e, 0x06, 0x7d, 0x04, 0x24, 0xdb,
		0x72, 0x75, 0x4f, 0xbf, 0x8e, 0x14, 0xdd, 0xe4, 0xd7, 0x46, 0xf8, 0xe4, 0x92, 0x91, 0x45, 0x3e,
		0xd2, 0x30, 0x3d, 0x5f, 0xdb, 0x44, 0x5d, 0x35, 0xa2, 0x8d, 0x13, 0x78, 0x5a, 0x16, 0xf9, 0x88,
		0xaf, 0x7d, 0x0e, 0x8a, 0x6d, 0xab, 0x8f, 0xdb, 0x39, 0xaa, 0x87, 0xeb, 0x85, 0x20, 0x17, 0xa8,
		0xcc, 0x57, 0x61, 0x8d, 0xfa, 0xe0, 0xbe, 0xaa, 0x28, 0x17, 0xa8, 0x8c, 0xaa, 0x3c, 0x04, 0x53,
		0x6a, 0xb7, 0xeb, 0x60, 0x72, 0x4e, 0x44, 0x8f, 0x1e, 0x25, 0x5f, 0x4c, 0x14, 0xe7, 0x9f, 0x81,
		0x1c, 0xf7, 0x03, 0x2e, 0xc9, 0xd8, 0x13, 0x8a, 0x4d, 0xcf, 0xd3, 0xa9, 0xc5, 0xbc, 0x9c, 0x33,
		0xf9, 0xe0, 0x39, 0x28, 0xea, 0xae, 0x32, 0xb8, 0x7e, 0x4f, 0x9d, 0x4d, 0x2d, 0xe6, 0xe4, 0x82,
		0xee, 0xfa, 0x57, 0x97, 0x0b, 0xaf, 0xa5, 0xa0, 0x14, 0xfe, 0x7c, 0x20, 0xad, 0x41, 0xce, 0xb0,
		0x34, 0x95, 0x84, 0x16, 0xfd, 0x76, 0xb5, 0x18, 0xf3, 0xc5, 0x61, 0x69, 0x83, 0xe9, 0xcb, 0x3e,
		0x72, 0xfe, 0xef, 0x04, 0xc8, 0x71, 0xb1, 0x34, 0x07, 0x19, 0x5b, 0xf5, 0xf6, 0x09, 0x5d, 0x76,
		0x25, 0x25, 0x0a, 0x32, 0x79, 0xc6, 0x72, 0xd7, 0x56, 0x4d, 0x12, 0x02, 0x4c, 0x8e, 0x9f, 0xf1,
		0xba, 0x1a, 0x48, 0x6d, 0x93, 0x73, 0x8d, 0xd5, 0xeb, 0x21, 0xd3, 0x73, 0xf9, 0xba, 0x32, 0xf9,
		0x2a, 0x13, 0x4b, 0x8f, 0xc2, 0xb4, 0xe7, 0xa8, 0xba, 0x11, 0xd2, 0xcd, 0x10, 0x5d, 0x91, 0x0f,
		0xf8, 0xca, 0x55, 0x38, 0xcd, 0x79, 0xdb, 0xc8, 0x53, 0xb5, 0x7d, 0xd4, 0x1e, 0x80, 0xc6, 0xc9,
		0xfd, 0xc5, 0x29, 0xa6, 0xb0, 0xc6, 0xc6, 0x39, 0x76, 0xe1, 0xfb, 0x02, 0x4c, 0xf3, 0x93, 0x58,
		0xdb, 0x77, 0xd6, 0x26, 0x80, 0x6a, 0x9a, 0x96, 0x17, 0x74, 0xd7, 0x70, 0x28, 0x0f, 0xe1, 0x96,
		0x6a, 0x3e, 0x48, 0x0e, 0x10, 0xcc, 0xf7, 0x00, 0x06, 0x23, 0x47, 0xba, 0xed, 0x0c, 0x14, 0xd8,
		0xb7, 0x21, 0xf2, 0x81, 0x91, 0x9e, 0xdd, 0x81, 0x8a, 0xf0, 0x91, 0x4d, 0x9a, 0x85, 0xec, 0x1e,
		0xea, 0xea, 0x26, 0xbb, 0xf1, 0xa5, 0x0f, 0xfc, 0x86, 0x25, 0xe3, 0xdf, 0xb0, 0xac, 0x7c, 0x06,
		0x66, 0x34, 0xab, 0x17, 0x35, 0x77, 0x45, 0x8c, 0xdc, 0x1f, 0xb8, 0x9f, 0x14, 0x5e, 0x80, 0x41,
		0x8b, 0xf9, 0xae, 0x20, 0x7c, 0x39, 0x95, 0x5e, 0xdf, 0x5e, 0xf9, 0x4a, 0x6a, 0x7e, 0x9d, 0x42,
		0xb7, 0xf9, 0x4c, 0x65, 0xd4, 0x31, 0x90, 0x86, 0xad, 0x87, 0x7f, 0x7e, 0x14, 0x1e, 0xeb, 0xea,
		0xde, 0x7e, 0x7f, 0x6f, 0x49, 0xb3, 0x7a, 0xcb, 0x5d, 0xab, 0x6b, 0x0d, 0xbe, 0xa9, 0xe2, 0x27,
		0xf2, 0x40, 0xfe, 0x63, 0xdf, 0x55, 0xf3, 0xbe, 0x74, 0x3e, 0xf6, 0x23, 0x6c, 0x75, 0x0b, 0x66,
		0x98, 0xb2, 0x42, 0x3e, 0xec, 0xd0, 0xe3, 0x89, 0x74, 0xec, 0xe5, 0x58, 0xf9, 0x6b, 0x6f, 0x92,
		0x72, 0x2d, 0x4f, 0x33, 0x28, 0x1e, 0xa3, 0x27, 0x98, 0xaa, 0x0c, 0xf7, 0x84, 0xf8, 0xe8, 0xd6,
		0x44, 0x4e, 0x0c, 0xe3, 0x77, 0x19, 0xe3, 0x4c, 0x80, 0xb1, 0xc5, 0xa0, 0xd5, 0x55, 0x98, 0x3c,
		0x09, 0xd7, 0xdf, 0x30, 0xae, 0x22, 0x0a, 0x92, 0xac, 0xc3, 0x14, 0x21, 0xd1, 0xfa, 0xae, 0x67,
		0xf5, 0x48, 0xde, 0x3b, 0x9e, 0xe6, 0x6f, 0xdf, 0xa4, 0x7b, 0xa5, 0x84, 0x61, 0xab, 0x3e, 0xaa,
		0x5a, 0x05, 0xf2, 0x2d, 0xab, 0x8d, 0x34, 0x23, 0x86, 0xe1, 0x36, 0x33, 0xc4, 0xd7, 0xaf, 0x7e,
		0x1a, 0x66, 0xf1, 0xff, 0x24, 0x2d, 0x05, 0x2d, 0x89, 0xbf, 0x49, 0x2b, 0x7f, 0xff, 0x25, 0xba,
		0x1d, 0x67, 0x7c, 0x82, 0x80, 0x4d, 0x81, 0x55, 0xec, 0x22, 0xcf, 0x43, 0x8e, 0xab, 0xa8, 0xc6,
		0x28, 0xf3, 0x02, 0x57, 0x11, 0xe5, 0x2f, 0xbc, 0x1d, 0x5e, 0xc5, 0x75, 0x8a, 0xac, 0x19, 0x46,
		0x75, 0x17, 0x4e, 0x8d, 0x88, 0x8a, 0x04, 0x9c, 0x2f, 0x33, 0xce, 0xd9, 0xa1, 0xc8, 0xc0, 0xb4,
		0xdb, 0xc0, 0xe5, 0xfe, 0x5a, 0x26, 0xe0, 0xfc, 0x6d, 0xc6, 0x29, 0x31, 0x2c, 0x5f, 0x52, 0xcc,
		0xf8, 0x0c, 0x4c, 0x5f, 0x47, 0xce, 0x9e, 0xe5, 0xb2, 0xeb, 0x9f, 0x04, 0x74, 0xaf, 0x30, 0xba,
		0x29, 0x06, 0x24, 0xf7, 0x41, 0x98, 0xeb, 0x29, 0xc8, 0x75, 0x54, 0x0d, 0x25, 0xa0, 0xf8, 0x22,
		0xa3, 0x98, 0xc0, 0xfa, 0x18, 0x5a, 0x83, 0x62, 0xd7, 0x62, 0x95, 0x29, 0x1e, 0xfe, 0x2a, 0x83,
		0x17, 0x38, 0x86, 0x51, 0xd8, 0x96, 0xdd, 0x37, 0x70, 0xd9, 0x8a, 0xa7, 0xf8, 0x1d, 0x4e, 0xc1,
		0x31, 0x8c, 0xe2, 0x04, 0x6e, 0xfd, 0x5d, 0x4e, 0xe1, 0x06, 0xfc, 0xf9, 0x34, 0x14, 0x2c, 0xd3,
		0x38, 0xb0, 0xcc, 0x24, 0x46, 0x7c, 0x89, 0x31, 0x00, 0x83, 0x60, 0x82, 0xcb, 0x90, 0x4f, 0xba,
		0x10, 0xbf, 0xff, 0x36, 0xdf, 0x1e, 0x7c, 0x05, 0xd6, 0x61, 0x8a, 0x27, 0x28, 0xdd, 0x32, 0x13,
		0x50, 0xfc, 0x01, 0xa3, 0x28, 0x05, 0x60, 0x6c, 0x1a, 0x1e, 0x72, 0xbd, 0x2e, 0x4a, 0x42, 0xf2,
		0x1a, 0x9f, 0x06, 0x83, 0x30, 0x57, 0xee, 0x21, 0x53, 0xdb, 0x4f, 0xc6, 0xf0, 0x3a, 0x77, 0x25,
		0xc7, 0x60, 0x8a, 0x55, 0x98, 0xec, 0xa9, 0x8e, 0xbb, 0xaf, 0x1a, 0x89, 0x96, 0xe3, 0x0f, 0x19,
		0x47, 0xd1, 0x07, 0x31, 0x8f, 0xf4, 0xcd, 0x93, 0xd0, 0x7c, 0x85, 0x7b, 0x24, 0x00, 0x63, 0x5b,
		0xcf, 0xf5, 0xc8, 0x5d, 0xd9, 0x49, 0xd8, 0xfe, 0x88, 0x6f, 0x3d, 0x8a, 0xdd, 0x0c, 0x32, 0x5e,
		0x86, 0xbc, 0xab, 0xdf, 0x4c, 0x44, 0xf3, 0xc7, 0x7c, 0xa5, 0x09, 0x00, 0x83, 0x9f, 0x87, 0xd3,
		0x23, 0xcb, 0x44, 0x02, 0xb2, 0x3f, 0x61, 0x64, 0x73, 0x23, 0x4a, 0x05, 0x4b, 0x09, 0x27, 0xa5,
		0xfc, 0x53, 0x9e, 0x12, 0x50, 0x84, 0x6b, 0x1b, 0x9f, 0x15, 0x5c, 0xb5, 0x73, 0x32, 0xaf, 0xfd,
		0x19, 0xf7, 0x1a, 0xc5, 0x86, 0xbc, 0xb6, 0x03, 0x73, 0x8c, 0xf1, 0x64, 0xeb, 0xfa, 0x55, 0x9e,
		0x58, 0x29, 0x7a, 0x37, 0xbc, 0xba, 0x9f, 0x81, 0x79, 0xdf, 0x9d, 0xbc, 0x29, 0x75, 0x95, 0x9e,
		0x6a, 0x27, 0x60, 0xfe, 0x1a, 0x63, 0xe6, 0x19, 0xdf, 0xef, 0x6a, 0xdd, 0x4d, 0xd5, 0xc6, 0xe4,
		0xcf, 0x41, 0x99, 0x93, 0xf7, 0x4d, 0x07, 0x69, 0x56, 0xd7, 0xd4, 0x6f, 0xa2, 0x76, 0x02, 0xea,
		0x3f, 0x8f, 0x2c, 0xd5, 0x6e, 0x00, 0x8e, 0x99, 0x1b, 0x20, 0xfa, 0xbd, 0x8a, 0xa2, 0xf7, 0x6c,
		0xcb, 0xf1, 0x62, 0x18, 0xff, 0x82, 0xaf, 0x94, 0x8f, 0x6b, 0x10, 0x58, 0xb5, 0x0e, 0x25, 0xf2,
		0x98, 0x34, 0x24, 0xff, 0x92, 0x11, 0x4d, 0x0e, 0x50, 0x2c, 0x71, 0x68, 0x56, 0xcf, 0x56, 0x9d,
		0x24, 0xf9, 0xef, 0xaf, 0x78, 0xe2, 0x60, 0x10, 0x96, 0x38, 0xbc, 0x03, 0x1b, 0xe1, 0x6a, 0x9f,
		0x80, 0xe1, 0xeb, 0x3c, 0x71, 0x70, 0x0c, 0xa3, 0xe0, 0x0d, 0x43, 0x02, 0x8a, 0x6f, 0x70, 0x0a,
		0x8e, 0xc1, 0x14, 0x9f, 0x1a, 0x14, 0x5a, 0x07, 0x75, 0x75, 0xd7, 0x73, 0x68, 0x2b, 0x7c, 0x3c,
		0xd5, 0x37, 0xdf, 0x0e, 0x37, 0x61, 0x72, 0x00, 0x8a, 0x33, 0x11, 0xbb, 0x42, 0x25, 0x27, 0xa5,
		0x78, 0xc3, 0xbe, 0xc5, 0x33, 0x51, 0x00, 0x86, 0x6d, 0x0b, 0x74, 0x88, 0xd8, 0xed, 0x1a, 0x3e,
		0x1f, 0x24, 0xa0, 0xfb, 0x76, 0xc4, 0xb8, 0x16, 0xc7, 0x62, 0xce, 0x40, 0xff, 0xd3, 0x37, 0xaf,
		0xa1, 0x83, 0x44, 0xd1, 0xf9, 0xd7, 0x91, 0xfe, 0x67, 0x97, 0x22, 0x69, 0x0e, 0x99, 0x8a, 0xf4,
		0x53, 0x52, 0xdc, 0xaf, 0x80, 0xca, 0x3f, 0x75, 0x97, 0xcd, 0x37, 0xdc, 0x4e, 0x55, 0x37, 0x70,
		0x90, 0x87, 0x9b, 0x9e, 0x78, 0xb2, 0x97, 0xee, 0xfa, 0x71, 0x1e, 0xea, 0x79, 0xaa, 0x57, 0x60,
		0x32, 0xd4, 0xf0, 0xc4, 0x53, 0xfd, 0x34, 0xa3, 0x2a, 0x06, 0xfb, 0x9d, 0xea, 0x45, 0xc8, 0xe0,
		0xe6, 0x25, 0x1e, 0xfe, 0x33, 0x0c, 0x4e, 0xd4, 0xab, 0x1f, 0x83, 0x1c, 0x6f, 0x5a, 0xe2, 0xa1,
		0x3f, 0xcb, 0xa0, 0x3e, 0x04, 0xc3, 0x79, 0xc3, 0x12, 0x0f, 0xff, 0x39, 0x0e, 0xe7, 0x10, 0x0c,
		0x4f, 0xee, 0xc2, 0xef, 0xfc, 0x42, 0x86, 0x15, 0x1d, 0xee, 0xbb, 0xcb, 0x30, 0xc1, 0x3a, 0x95,
		0x78, 0xf4, 0xe7, 0xd8, 0xcb, 0x39, 0xa2, 0xfa, 0x04, 0x64, 0x13, 0x3a, 0xfc, 0x97, 0x18, 0x94,
		0xea, 0x57, 0x57, 0xa1, 0x10, 0xe8, 0x4e, 0xe2, 0xe1, 0xbf, 0xcc, 0xe0, 0x41, 0x14, 0x36, 0x9d,
		0x75, 0x27, 0xf1, 0x04, 0xbf, 0xc2, 0x4d, 0x67, 0x08, 0xec, 0x36, 0xde, 0x98, 0xc4, 0xa3, 0x7f,
		0x95, 0x7b, 0x9d, 0x43, 0xaa, 0x4f, 0x43, 0xde, 0x2f, 0x36, 0xf1, 0xf8, 0x5f, 0x63, 0xf8, 0x01,
		0x06, 0x7b, 0x20, 0x50, 0xec, 0xe2, 0x29, 0x7e, 0x9d, 0x7b, 0x20, 0x80, 0xc2, 0xdb, 0x28, 0xda,
		0xc0, 0xc4, 0x33, 0xfd, 0x06, 0xdf, 0x46, 0x91, 0xfe, 0x05, 0xaf, 0x26, 0xc9, 0xf9, 0xf1, 0x14,
		0xbf, 0xc9, 0x57, 0x93, 0xe8, 0x63, 0x33, 0xa2, 0x1d, 0x41, 0x3c, 0xc7, 0x6f, 0x71, 0x33, 0x22,
		0x0d, 0x41, 0x75, 0x1b, 0xa4, 0xe1, 0x6e, 0x20, 0x9e, 0xef, 0xf3, 0x8c, 0x6f, 0x7a, 0xa8, 0x19,
		0xa8, 0x3e, 0x0b, 0x73, 0xa3, 0x3b, 0x81, 0x78, 0xd6, 0x2f, 0xdc, 0x8d, 0x9c, 0xdd, 0x82, 0x8d,
		0x40, 0x75, 0x67, 0x50, 0x52, 0x82, 0x5d, 0x40, 0x3c, 0xed, 0xcb, 0x77, 0xc3, 0x89, 0x3b, 0xd8,
		0x04, 0x54, 0x6b, 0x00, 0x83, 0x02, 0x1c, 0xcf, 0xf5, 0x0a, 0xe3, 0x0a, 0x80, 0xf0, 0xd6, 0x60,
		0xf5, 0x37, 0x1e, 0xff, 0x45, 0xbe, 0x35, 0x18, 0x02, 0x6f, 0x0d, 0x5e, 0x7a, 0xe3, 0xd1, 0xaf,
		0xf2, 0xad, 0xc1, 0x21, 0x38, 0xb2, 0x03, 0xd5, 0x2d, 0x9e, 0xe1, 0x4b, 0x3c, 0xb2, 0x03, 0xa8,
		0xea, 0x16, 0x4c, 0x0f, 0x15, 0xc4, 0x78, 0xaa, 0x2f, 0x33, 0x2a, 0x31, 0x5a, 0x0f, 0x83, 0xc5,
		0x8b, 0x15, 0xc3, 0x78, 0xb6, 0xdf, 0x8b, 0x14, 0x2f, 0x56, 0x0b, 0xab, 0x97, 0x21, 0x67, 0xf6,
		0x0d, 0x03, 0x6f, 0x1e, 0xe9, 0xf8, 0x5f, 0xee, 0x95, 0xff, 0xf5, 0x3d, 0xe6, 0x1d, 0x0e, 0xa8,
		0x5e, 0x84, 0x2c, 0xea, 0xed, 0xa1, 0x76, 0x1c, 0xf2, 0xdf, 0xde, 0xe3, 0x09, 0x13, 0x6b, 0x57,
		0x9f, 0x06, 0xa0, 0x57, 0x23, 0xe4, 0xb3, 0x5f, 0x0c, 0xf6, 0xdf, 0xdf, 0x63, 0xbf, 0xa9, 0x19,
		0x40, 0x06, 0x04, 0xf4, 0x17, 0x3a, 0xc7, 0x13, 0xbc, 0x1d, 0x26, 0x20, 0x2b, 0xf2, 0x14, 0x4c,
		0x5c, 0x75, 0x2d, 0xd3, 0x53, 0xbb, 0x71, 0xe8, 0xff, 0x60, 0x68, 0xae, 0x8f, 0x1d, 0xd6, 0xb3,
		0x1c, 0xe4, 0xa9, 0x5d, 0x37, 0x0e, 0xfb, 0x9f, 0x0c, 0xeb, 0x03, 0x30, 0x58, 0x53, 0x5d, 0x2f,
		0xc9, 0xbc, 0xff, 0x8b, 0x83, 0x39, 0x00, 0x1b, 0x8d, 0xff, 0xbf, 0x86, 0x0e, 0xe2, 0xb0, 0xef,
		0x70, 0xa3, 0x99, 0x7e, 0xf5, 0x63, 0x90, 0xc7, 0xff, 0xd2, 0x1f, 0xca, 0xc5, 0x80, 0xff, 0x9b,
		0x81, 0x07, 0x08, 0xfc, 0x66, 0xd7, 0x6b, 0x7b, 0x7a, 0xbc, 0xb3, 0xff, 0x87, 0xad, 0x34, 0xd7,
		0xaf, 0xd6, 0xa0, 0xe0, 0x7a, 0xed, 0x76, 0x9f, 0xf5, 0xa7, 0x31, 0xf0, 0xff, 0x7d, 0xcf, 0xbf,
		0xb2, 0xf0, 0x31, 0x78, 0xb5, 0x6f, 0x5c, 0xf3, 0x6c, 0x8b, 0x7c, 0xe6, 0x88, 0x63, 0xb8, 0xcb,
		0x18, 0x02, 0x10, 0x3c, 0x7b, 0xab, 0xa7, 0x7b, 0xa8, 0x67, 0x7b, 0xb1, 0xae, 0xfb, 0x3f, 0x86,
		0x1f, 0x20, 0x56, 0xea, 0xa3, 0x6f, 0x7f, 0x61, 0xdd, 0x5a, 0xb7, 0xe8, 0xbd, 0xef, 0x0b, 0x0b,
		0xf1, 0x17, 0xb8, 0xf0, 0x8d, 0x34, 0x9c, 0xd5, 0xac, 0xde, 0x9e, 0xe5, 0x2e, 0xfb, 0xd9, 0x7c,
		0xd9, 0x7f, 0x0b, 0xbf, 0xda, 0xf5, 0x05, 0xf3, 0x27, 0xbb, 0x14, 0x5e, 0xf8, 0xf9, 0x14, 0xe4,
		0x9b, 0x3d, 0xdd, 0xab, 0x93, 0x59, 0x7e, 0x02, 0x26, 0x1b, 0xa6, 0x89, 0x9c, 0x2d, 0xb6, 0x55,
		0xc9, 0xd7, 0xcd, 0xc2, 0xf9, 0xf9, 0xa5, 0xc1, 0x0b, 0x7d, 0xe5, 0x25, 0xa2, 0x29, 0x87, 0x01,
		0xd2, 0x06, 0x88, 0x54, 0x60, 0x79, 0x3e, 0x49, 0x2a, 0x8e, 0x64, 0x25, 0x73, 0xfb, 0x1f, 0xcf,
		0x8c, 0xc9, 0x43, 0x48, 0x69, 0x03, 0x4a, 0x44, 0xe6, 0xeb, 0xb3, 0x5f, 0xed, 0x1d, 0xc7, 0x95,
		0xc3, 0x5c, 0xaf, 0xff, 0xd3, 0x19, 0x41, 0x8e, 0x60, 0xe7, 0xcf, 0x40, 0x96, 0x48, 0xa4, 0x39,
		0x48, 0x5f, 0xb1, 0x2c, 0x32, 0xb9, 0x34, 0x7b, 0x37, 0x16, 0xac, 0x6c, 0xdc, 0xbe, 0x53, 0x19,
		0xfb, 0xde, 0x9d, 0xca, 0xd8, 0xdf, 0xdf, 0xa9, 0x8c, 0xbd, 0x71, 0xa7, 0x22, 0xbc, 0x75, 0xa7,
		0x22, 0xbc, 0x73, 0xa7, 0x22, 0xbc, 0x7b, 0xa7, 0x22, 0xdc, 0x3a, 0xac, 0x08, 0xaf, 0x1f, 0x56,
		0x84, 0xaf, 0x1e, 0x56, 0x84, 0x6f, 0x1e, 0x56, 0x84, 0xef, 0x1c, 0x56, 0x84, 0xdb, 0x87, 0x15,
		0xe1, 0x7b, 0x87, 0x95, 0xb1, 0x37, 0x0e, 0x2b, 0xc2, 0x5b, 0x87, 0x95, 0xb1, 0x77, 0x0e, 0x2b,
		0xc2, 0xbb, 0x87, 0x95, 0xb1, 0x5b, 0x3f, 0xa8, 0x8c, 0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
		0xf9, 0x99, 0x4a, 0x7a, 0xed, 0x34, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *OmitEmpty) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OmitEmpty)
	if !ok {
		that2, ok := that.(OmitEmpty)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OmitEmpty")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OmitEmpty but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OmitEmpty but is not nil && this == nil")
	}
	if !this.InnerNullable.Equal(that1.InnerNullable) {
		return fmt.Errorf("InnerNullable this(%v) Not Equal that(%v)", this.InnerNullable, that1.InnerNullable)
	}
	if !this.InnerNotNullable.Equal(&that1.InnerNotNullable) {
		return fmt.Errorf("InnerNotNullable this(%v) Not Equal that(%v)", this.InnerNotNullable, that1.InnerNotNullable)
	}
	if !this.InnerOmitEmpty.Equal(&that1.InnerOmitEmpty) {
		return fmt.Errorf("InnerOmitEmpty this(%v) Not Equal that(%v)", this.InnerOmitEmpty, that1.InnerOmitEmpty)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OmitEmpty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OmitEmpty)
	if !ok {
		that2, ok := that.(OmitEmpty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InnerNullable.Equal(that1.InnerNullable) {
		return false
	}
	if !this.InnerNotNullable.Equal(&that1.InnerNotNullable) {
		return false
	}
	if !this.InnerOmitEmpty.Equal(&that1.InnerOmitEmpty) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OmitEmpty_Inner) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OmitEmpty_Inner)
	if !ok {
		that2, ok := that.(OmitEmpty_Inner)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OmitEmpty_Inner")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OmitEmpty_Inner but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OmitEmpty_Inner but is not nil && this == nil")
	}
	if this.Foo != that1.Foo {
		return fmt.Errorf("Foo this(%v) Not Equal that(%v)", this.Foo, that1.Foo)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OmitEmpty_Inner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OmitEmpty_Inner)
	if !ok {
		that2, ok := that.(OmitEmpty_Inner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Foo != that1.Foo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type OmitEmptyFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInnerNullable() *OmitEmpty_Inner
	GetInnerNotNullable() OmitEmpty_Inner
	GetInnerOmitEmpty() OmitEmpty_Inner
}

func (this *OmitEmpty) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *OmitEmpty) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewOmitEmptyFromFace(this)
}

func (this *OmitEmpty) GetInnerNullable() *OmitEmpty_Inner {
	return this.InnerNullable
}

func (this *OmitEmpty) GetInnerNotNullable() OmitEmpty_Inner {
	return this.InnerNotNullable
}

func (this *OmitEmpty) GetInnerOmitEmpty() OmitEmpty_Inner {
	return this.InnerOmitEmpty
}

func NewOmitEmptyFromFace(that OmitEmptyFace) *OmitEmpty {
	this := &OmitEmpty{}
	this.InnerNullable = that.GetInnerNullable()
	this.InnerNotNullable = that.GetInnerNotNullable()
	this.InnerOmitEmpty = that.GetInnerOmitEmpty()
	return this
}

type OmitEmpty_InnerFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetFoo() int64
}

func (this *OmitEmpty_Inner) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *OmitEmpty_Inner) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewOmitEmpty_InnerFromFace(this)
}

func (this *OmitEmpty_Inner) GetFoo() int64 {
	return this.Foo
}

func NewOmitEmpty_InnerFromFace(that OmitEmpty_InnerFace) *OmitEmpty_Inner {
	this := &OmitEmpty_Inner{}
	this.Foo = that.GetFoo()
	return this
}

func (this *OmitEmpty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&omitempty.OmitEmpty{")
	if this.InnerNullable != nil {
		s = append(s, "InnerNullable: "+fmt.Sprintf("%#v", this.InnerNullable)+",\n")
	}
	s = append(s, "InnerNotNullable: "+strings.Replace(this.InnerNotNullable.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "InnerOmitEmpty: "+strings.Replace(this.InnerOmitEmpty.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OmitEmpty_Inner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&omitempty.OmitEmpty_Inner{")
	s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOmitempty(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OmitEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OmitEmpty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OmitEmpty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	// Field has gogoproto.omitempty set.
	if !m.InnerOmitEmpty.Empty() {
		{
			size, err := m.InnerOmitEmpty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmitempty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.InnerNotNullable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOmitempty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.InnerNullable != nil {
		{
			size, err := m.InnerNullable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOmitempty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OmitEmpty_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OmitEmpty_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OmitEmpty_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintOmitempty(dAtA, i, uint64(m.Foo))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOmitempty(dAtA []byte, offset int, v uint64) int {
	offset -= sovOmitempty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedOmitEmpty(r randyOmitempty, easy bool) *OmitEmpty {
	this := &OmitEmpty{}
	if r.Intn(5) != 0 {
		this.InnerNullable = NewPopulatedOmitEmpty_Inner(r, easy)
	}
	v1 := NewPopulatedOmitEmpty_Inner(r, easy)
	this.InnerNotNullable = *v1
	v2 := NewPopulatedOmitEmpty_Inner(r, easy)
	this.InnerOmitEmpty = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOmitempty(r, 4)
	}
	return this
}

func NewPopulatedOmitEmpty_Inner(r randyOmitempty, easy bool) *OmitEmpty_Inner {
	this := &OmitEmpty_Inner{}
	this.Foo = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Foo *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOmitempty(r, 2)
	}
	return this
}

type randyOmitempty interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOmitempty(r randyOmitempty) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOmitempty(r randyOmitempty) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneOmitempty(r)
	}
	return string(tmps)
}
func randUnrecognizedOmitempty(r randyOmitempty, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOmitempty(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOmitempty(dAtA []byte, r randyOmitempty, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOmitempty(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOmitempty(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *OmitEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InnerNullable != nil {
		l = m.InnerNullable.Size()
		n += 1 + l + sovOmitempty(uint64(l))
	}
	l = m.InnerNotNullable.Size()
	n += 1 + l + sovOmitempty(uint64(l))
	l = m.InnerOmitEmpty.Size()
	n += 1 + l + sovOmitempty(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OmitEmpty_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOmitempty(uint64(m.Foo))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOmitempty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOmitempty(x uint64) (n int) {
	return sovOmitempty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OmitEmpty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OmitEmpty{`,
		`InnerNullable:` + strings.Replace(fmt.Sprintf("%v", this.InnerNullable), "OmitEmpty_Inner", "OmitEmpty_Inner", 1) + `,`,
		`InnerNotNullable:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.InnerNotNullable), "OmitEmpty_Inner", "OmitEmpty_Inner", 1), `&`, ``, 1) + `,`,
		`InnerOmitEmpty:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.InnerOmitEmpty), "OmitEmpty_Inner", "OmitEmpty_Inner", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OmitEmpty_Inner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OmitEmpty_Inner{`,
		`Foo:` + fmt.Sprintf("%v", this.Foo) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOmitempty(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
