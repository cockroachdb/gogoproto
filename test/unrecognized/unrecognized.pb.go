// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: unrecognized.proto

package unrecognized

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cockroachdb/gogoproto/gogoproto"
	github_com_cockroachdb_gogoproto_proto "github.com/cockroachdb/gogoproto/proto"
	proto "github.com/cockroachdb/gogoproto/proto"
	github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor "github.com/cockroachdb/gogoproto/protoc-gen-gogo/descriptor"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type A struct {
	Field1               *int64   `protobuf:"varint,2,opt,name=Field1" json:"Field1,omitempty"`
	B                    []*B     `protobuf:"bytes,1,rep,name=B" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *A) Reset()      { *m = A{} }
func (*A) ProtoMessage() {}
func (*A) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{0}
}
func (m *A) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A.Merge(m, src)
}
func (m *A) XXX_Size() int {
	return m.Size()
}
func (m *A) XXX_DiscardUnknown() {
	xxx_messageInfo_A.DiscardUnknown(m)
}

var xxx_messageInfo_A proto.InternalMessageInfo

type B struct {
	C                    *C       `protobuf:"bytes,1,opt,name=C" json:"C,omitempty"`
	D                    *D       `protobuf:"bytes,2,opt,name=D" json:"D,omitempty"`
	F                    *OldC    `protobuf:"bytes,5,opt,name=F" json:"F,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *B) Reset()      { *m = B{} }
func (*B) ProtoMessage() {}
func (*B) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{1}
}
func (m *B) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *B) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_B.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *B) XXX_Merge(src proto.Message) {
	xxx_messageInfo_B.Merge(m, src)
}
func (m *B) XXX_Size() int {
	return m.Size()
}
func (m *B) XXX_DiscardUnknown() {
	xxx_messageInfo_B.DiscardUnknown(m)
}

var xxx_messageInfo_B proto.InternalMessageInfo

type D struct {
	Field1               *int64   `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *D) Reset()      { *m = D{} }
func (*D) ProtoMessage() {}
func (*D) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{2}
}
func (m *D) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D.Merge(m, src)
}
func (m *D) XXX_Size() int {
	return m.Size()
}
func (m *D) XXX_DiscardUnknown() {
	xxx_messageInfo_D.DiscardUnknown(m)
}

var xxx_messageInfo_D proto.InternalMessageInfo

type C struct {
	Field2               *float64  `protobuf:"fixed64,2,opt,name=Field2" json:"Field2,omitempty"`
	Field3               *string   `protobuf:"bytes,3,opt,name=Field3" json:"Field3,omitempty"`
	Field4               *float64  `protobuf:"fixed64,4,opt,name=Field4" json:"Field4,omitempty"`
	Field5               [][]byte  `protobuf:"bytes,5,rep,name=Field5" json:"Field5,omitempty"`
	Field6               *int64    `protobuf:"varint,6,opt,name=Field6" json:"Field6,omitempty"`
	Field7               []float32 `protobuf:"fixed32,7,rep,name=Field7" json:"Field7,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C) Reset()      { *m = C{} }
func (*C) ProtoMessage() {}
func (*C) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{3}
}
func (m *C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C.Merge(m, src)
}
func (m *C) XXX_Size() int {
	return m.Size()
}
func (m *C) XXX_DiscardUnknown() {
	xxx_messageInfo_C.DiscardUnknown(m)
}

var xxx_messageInfo_C proto.InternalMessageInfo

type U struct {
	Field2               []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	Field3               *uint32   `protobuf:"varint,3,opt,name=Field3" json:"Field3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *U) Reset()      { *m = U{} }
func (*U) ProtoMessage() {}
func (*U) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{4}
}
func (m *U) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *U) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_U.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *U) XXX_Merge(src proto.Message) {
	xxx_messageInfo_U.Merge(m, src)
}
func (m *U) XXX_Size() int {
	return m.Size()
}
func (m *U) XXX_DiscardUnknown() {
	xxx_messageInfo_U.DiscardUnknown(m)
}

var xxx_messageInfo_U proto.InternalMessageInfo

type UnoM struct {
	Field2               []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	Field3               *uint32   `protobuf:"varint,3,opt,name=Field3" json:"Field3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UnoM) Reset()      { *m = UnoM{} }
func (*UnoM) ProtoMessage() {}
func (*UnoM) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{5}
}
func (m *UnoM) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnoM.Unmarshal(m, b)
}
func (m *UnoM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnoM.Marshal(b, m, deterministic)
}
func (m *UnoM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnoM.Merge(m, src)
}
func (m *UnoM) XXX_Size() int {
	return xxx_messageInfo_UnoM.Size(m)
}
func (m *UnoM) XXX_DiscardUnknown() {
	xxx_messageInfo_UnoM.DiscardUnknown(m)
}

var xxx_messageInfo_UnoM proto.InternalMessageInfo

type OldA struct {
	Field1               *int64   `protobuf:"varint,2,opt,name=Field1" json:"Field1,omitempty"`
	B                    []*OldB  `protobuf:"bytes,1,rep,name=B" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OldA) Reset()      { *m = OldA{} }
func (*OldA) ProtoMessage() {}
func (*OldA) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{6}
}
func (m *OldA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldA.Merge(m, src)
}
func (m *OldA) XXX_Size() int {
	return m.Size()
}
func (m *OldA) XXX_DiscardUnknown() {
	xxx_messageInfo_OldA.DiscardUnknown(m)
}

var xxx_messageInfo_OldA proto.InternalMessageInfo

type OldB struct {
	C                    *OldC    `protobuf:"bytes,1,opt,name=C" json:"C,omitempty"`
	F                    *OldC    `protobuf:"bytes,5,opt,name=F" json:"F,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OldB) Reset()      { *m = OldB{} }
func (*OldB) ProtoMessage() {}
func (*OldB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{7}
}
func (m *OldB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldB.Merge(m, src)
}
func (m *OldB) XXX_Size() int {
	return m.Size()
}
func (m *OldB) XXX_DiscardUnknown() {
	xxx_messageInfo_OldB.DiscardUnknown(m)
}

var xxx_messageInfo_OldB proto.InternalMessageInfo

type OldC struct {
	Field1               *int64    `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2               *float64  `protobuf:"fixed64,2,opt,name=Field2" json:"Field2,omitempty"`
	Field3               *string   `protobuf:"bytes,3,opt,name=Field3" json:"Field3,omitempty"`
	Field6               *int64    `protobuf:"varint,6,opt,name=Field6" json:"Field6,omitempty"`
	Field7               []float32 `protobuf:"fixed32,7,rep,name=Field7" json:"Field7,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OldC) Reset()      { *m = OldC{} }
func (*OldC) ProtoMessage() {}
func (*OldC) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{8}
}
func (m *OldC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldC.Merge(m, src)
}
func (m *OldC) XXX_Size() int {
	return m.Size()
}
func (m *OldC) XXX_DiscardUnknown() {
	xxx_messageInfo_OldC.DiscardUnknown(m)
}

var xxx_messageInfo_OldC proto.InternalMessageInfo

type OldU struct {
	Field1               *string   `protobuf:"bytes,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2               []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OldU) Reset()      { *m = OldU{} }
func (*OldU) ProtoMessage() {}
func (*OldU) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{9}
}
func (m *OldU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldU.Merge(m, src)
}
func (m *OldU) XXX_Size() int {
	return m.Size()
}
func (m *OldU) XXX_DiscardUnknown() {
	xxx_messageInfo_OldU.DiscardUnknown(m)
}

var xxx_messageInfo_OldU proto.InternalMessageInfo

type OldUnoM struct {
	Field1               *string   `protobuf:"bytes,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2               []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OldUnoM) Reset()      { *m = OldUnoM{} }
func (*OldUnoM) ProtoMessage() {}
func (*OldUnoM) Descriptor() ([]byte, []int) {
	return fileDescriptor_5318ad6f723bf9f6, []int{10}
}
func (m *OldUnoM) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OldUnoM.Unmarshal(m, b)
}
func (m *OldUnoM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OldUnoM.Marshal(b, m, deterministic)
}
func (m *OldUnoM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldUnoM.Merge(m, src)
}
func (m *OldUnoM) XXX_Size() int {
	return xxx_messageInfo_OldUnoM.Size(m)
}
func (m *OldUnoM) XXX_DiscardUnknown() {
	xxx_messageInfo_OldUnoM.DiscardUnknown(m)
}

var xxx_messageInfo_OldUnoM proto.InternalMessageInfo

func init() {
	proto.RegisterType((*A)(nil), "unrecognized.A")
	proto.RegisterType((*B)(nil), "unrecognized.B")
	proto.RegisterType((*D)(nil), "unrecognized.D")
	proto.RegisterType((*C)(nil), "unrecognized.C")
	proto.RegisterType((*U)(nil), "unrecognized.U")
	proto.RegisterType((*UnoM)(nil), "unrecognized.UnoM")
	proto.RegisterType((*OldA)(nil), "unrecognized.OldA")
	proto.RegisterType((*OldB)(nil), "unrecognized.OldB")
	proto.RegisterType((*OldC)(nil), "unrecognized.OldC")
	proto.RegisterType((*OldU)(nil), "unrecognized.OldU")
	proto.RegisterType((*OldUnoM)(nil), "unrecognized.OldUnoM")
}

func init() { proto.RegisterFile("unrecognized.proto", fileDescriptor_5318ad6f723bf9f6) }

var fileDescriptor_5318ad6f723bf9f6 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3f, 0x6b, 0xdb, 0x40,
	0x18, 0xc6, 0xf5, 0x5a, 0xb2, 0x8d, 0xaf, 0x2e, 0x2d, 0x1a, 0xca, 0xd1, 0xd2, 0xd3, 0xa1, 0x49,
	0x93, 0x4d, 0xfd, 0x97, 0x7a, 0x6a, 0x25, 0xa1, 0x96, 0x42, 0x31, 0x08, 0xfc, 0x01, 0x6a, 0xc9,
	0xc8, 0xa6, 0xae, 0xaf, 0x18, 0x7b, 0xc9, 0x10, 0x32, 0x66, 0x0c, 0xe4, 0x0b, 0x44, 0x5b, 0xc6,
	0x8c, 0xf9, 0x08, 0x1e, 0x3d, 0x66, 0xb4, 0xf4, 0x09, 0x32, 0x66, 0x0c, 0xba, 0xc8, 0xca, 0xf9,
	0x1f, 0x38, 0xd9, 0xa4, 0xe7, 0x79, 0xef, 0x7d, 0x1e, 0xde, 0x1f, 0x52, 0xe7, 0x93, 0xe9, 0xc0,
	0x63, 0xc1, 0x64, 0x74, 0x32, 0xf0, 0x2b, 0xff, 0xa7, 0x6c, 0xc6, 0xd4, 0xb2, 0xa8, 0x7d, 0x6c,
	0x06, 0xa3, 0xd9, 0x70, 0xde, 0xaf, 0x78, 0xec, 0x5f, 0xd5, 0x63, 0xde, 0xdf, 0x29, 0xfb, 0xe3,
	0x0d, 0xfd, 0x7e, 0x35, 0x60, 0x01, 0xe3, 0xf3, 0x5b, 0x5f, 0x4f, 0x4b, 0xf4, 0x6f, 0x08, 0xbe,
	0xab, 0x1f, 0x50, 0xc1, 0x19, 0x0d, 0xc6, 0xfe, 0x17, 0x9c, 0xa3, 0x60, 0xc8, 0x6e, 0xfa, 0xa7,
	0x7e, 0x46, 0x60, 0x62, 0xa0, 0xb2, 0xf1, 0xa6, 0xf6, 0xae, 0xb2, 0xd1, 0xc0, 0x74, 0xc1, 0xec,
	0x28, 0xcb, 0x50, 0x93, 0x74, 0x0f, 0x81, 0x99, 0x4c, 0x5a, 0x18, 0x28, 0xec, 0x4e, 0x5a, 0x2e,
	0x58, 0x89, 0x6d, 0xf3, 0xdd, 0x3b, 0xb6, 0xed, 0x82, 0xad, 0x52, 0x04, 0x0e, 0xce, 0x73, 0x5b,
	0xdd, 0xb4, 0xbb, 0x63, 0xdf, 0x72, 0xc1, 0xd1, 0x3f, 0x21, 0xb0, 0x85, 0x9a, 0x20, 0xd6, 0xd4,
	0x2f, 0x01, 0x81, 0x95, 0xb9, 0x35, 0x1e, 0x04, 0xa9, 0x5b, 0xcb, 0xf4, 0x3a, 0x96, 0x29, 0x18,
	0xa5, 0x54, 0xaf, 0x67, 0x7a, 0x03, 0x2b, 0xc2, 0x7c, 0x23, 0xd3, 0x9b, 0x38, 0x4f, 0x65, 0xa3,
	0x9c, 0xea, 0xcd, 0x4c, 0x6f, 0xe1, 0x82, 0x90, 0xde, 0xca, 0xf4, 0x36, 0x2e, 0x52, 0xd9, 0xc8,
	0xa5, 0x7a, 0x5b, 0xff, 0x8a, 0xa0, 0xb7, 0x51, 0x4a, 0x3e, 0x58, 0xea, 0xed, 0xba, 0x54, 0x7a,
	0xd2, 0x9f, 0x48, 0xe9, 0x4d, 0xd8, 0xef, 0x17, 0xbf, 0x7e, 0x7f, 0x1e, 0x6a, 0xd2, 0x45, 0xa8,
	0x49, 0x57, 0xa1, 0x26, 0xf1, 0x4d, 0x0e, 0x52, 0xba, 0x63, 0xff, 0x30, 0x61, 0xfa, 0x4c, 0x78,
	0xf7, 0xf2, 0x02, 0xe4, 0x5f, 0x7c, 0x8f, 0x99, 0xcc, 0xaf, 0x39, 0xef, 0x25, 0x65, 0x1d, 0xc1,
	0xf2, 0x94, 0xef, 0xb2, 0x0e, 0xe1, 0x7c, 0x35, 0xc8, 0x63, 0xc1, 0xb4, 0x78, 0x7e, 0x6f, 0x2b,
	0xbf, 0xb4, 0x37, 0x5f, 0xb8, 0xba, 0xfe, 0x03, 0x15, 0x93, 0x77, 0x22, 0x98, 0x23, 0x9f, 0x76,
	0xca, 0x22, 0x18, 0xb3, 0xb1, 0x88, 0x88, 0xb4, 0x8c, 0x88, 0x74, 0x17, 0x11, 0x69, 0x15, 0x11,
	0xb8, 0x8f, 0x08, 0x3c, 0x44, 0x04, 0xce, 0x62, 0x02, 0xd7, 0x31, 0x81, 0x9b, 0x98, 0xc0, 0x6d,
	0x4c, 0x60, 0x11, 0x13, 0x58, 0xc6, 0x04, 0x56, 0x31, 0x81, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x63, 0x82, 0xf1, 0x8b, 0x03, 0x04, 0x00, 0x00,
}

func (this *A) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *B) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *D) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *C) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *U) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *UnoM) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *OldA) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *OldB) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *OldC) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *OldU) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func (this *OldUnoM) Description() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedDescription()
}
func UnrecognizedDescription() (desc *github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_cockroachdb_gogoproto_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4142 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x5b, 0x70, 0xdc, 0xe6,
		0x75, 0x26, 0xf6, 0x42, 0xee, 0x9e, 0x5d, 0x2e, 0x41, 0x90, 0xa6, 0x56, 0x74, 0x4c, 0x51, 0x6b,
		0x3b, 0xa6, 0xe5, 0x84, 0x4a, 0x65, 0x5d, 0xac, 0x55, 0x13, 0x67, 0xb9, 0x5c, 0xd1, 0x54, 0x49,
		0x2e, 0x83, 0xe5, 0xc6, 0x97, 0x4c, 0x07, 0x03, 0x62, 0x7f, 0x2e, 0x21, 0x61, 0x01, 0x04, 0xc0,
		0x4a, 0xa6, 0xa6, 0xd3, 0x51, 0xc7, 0xbd, 0x65, 0x7a, 0x4b, 0x9b, 0xce, 0x34, 0x71, 0x1d, 0x37,
		0x4a, 0xa7, 0x75, 0x9a, 0xde, 0x92, 0x5e, 0xd2, 0x24, 0x7d, 0xe9, 0x4b, 0x5a, 0x3f, 0x75, 0x9c,
		0xb7, 0x3e, 0xf4, 0xc1, 0x52, 0x3d, 0xd3, 0x9b, 0xdb, 0xa6, 0xad, 0x32, 0x93, 0x19, 0xbf, 0x64,
		0xfe, 0x1b, 0x16, 0xc0, 0x2e, 0x05, 0xd0, 0x33, 0xb6, 0x9f, 0x44, 0x9c, 0xff, 0x7c, 0x1f, 0xce,
		0x7f, 0xfe, 0xf3, 0x9f, 0x73, 0xfe, 0x1f, 0x2b, 0x78, 0xbd, 0x0a, 0x8b, 0x5d, 0xcb, 0xea, 0x1a,
		0xe8, 0xb4, 0xed, 0x58, 0x9e, 0xb5, 0xdb, 0xdf, 0x3b, 0xdd, 0x41, 0xae, 0xe6, 0xe8, 0xb6, 0x67,
		0x39, 0xcb, 0x44, 0x26, 0x4d, 0x51, 0x8d, 0x65, 0xae, 0x51, 0xd9, 0x84, 0xe9, 0xcb, 0xba, 0x81,
		0x56, 0x7d, 0xc5, 0x16, 0xf2, 0xa4, 0xa7, 0x20, 0xb3, 0xa7, 0x1b, 0xa8, 0x2c, 0x2c, 0xa6, 0x97,
		0x0a, 0x67, 0x1e, 0x59, 0x8e, 0x80, 0x96, 0xc3, 0x88, 0x6d, 0x2c, 0x96, 0x09, 0xa2, 0xf2, 0x56,
		0x06, 0x66, 0x46, 0x8c, 0x4a, 0x12, 0x64, 0x4c, 0xb5, 0x87, 0x19, 0x85, 0xa5, 0xbc, 0x4c, 0xfe,
		0x96, 0xca, 0x30, 0x61, 0xab, 0xda, 0x35, 0xb5, 0x8b, 0xca, 0x29, 0x22, 0xe6, 0x8f, 0xd2, 0x02,
		0x40, 0x07, 0xd9, 0xc8, 0xec, 0x20, 0x53, 0x3b, 0x28, 0xa7, 0x17, 0xd3, 0x4b, 0x79, 0x39, 0x20,
		0x91, 0x9e, 0x80, 0x69, 0xbb, 0xbf, 0x6b, 0xe8, 0x9a, 0x12, 0x50, 0x83, 0xc5, 0xf4, 0x52, 0x56,
		0x16, 0xe9, 0xc0, 0xea, 0x40, 0xf9, 0x31, 0x98, 0xba, 0x81, 0xd4, 0x6b, 0x41, 0xd5, 0x02, 0x51,
		0x2d, 0x61, 0x71, 0x40, 0xb1, 0x0e, 0xc5, 0x1e, 0x72, 0x5d, 0xb5, 0x8b, 0x14, 0xef, 0xc0, 0x46,
		0xe5, 0x0c, 0x99, 0xfd, 0xe2, 0xd0, 0xec, 0xa3, 0x33, 0x2f, 0x30, 0xd4, 0xce, 0x81, 0x8d, 0xa4,
		0x1a, 0xe4, 0x91, 0xd9, 0xef, 0x51, 0x86, 0xec, 0x21, 0xfe, 0x6b, 0x98, 0xfd, 0x5e, 0x94, 0x25,
		0x87, 0x61, 0x8c, 0x62, 0xc2, 0x45, 0xce, 0x75, 0x5d, 0x43, 0xe5, 0x71, 0x42, 0xf0, 0xd8, 0x10,
		0x41, 0x8b, 0x8e, 0x47, 0x39, 0x38, 0x4e, 0xaa, 0x43, 0x1e, 0xbd, 0xe8, 0x21, 0xd3, 0xd5, 0x2d,
		0xb3, 0x3c, 0x41, 0x48, 0x1e, 0x1d, 0xb1, 0x8a, 0xc8, 0xe8, 0x44, 0x29, 0x06, 0x38, 0xe9, 0x3c,
		0x4c, 0x58, 0xb6, 0xa7, 0x5b, 0xa6, 0x5b, 0xce, 0x2d, 0x0a, 0x4b, 0x85, 0x33, 0x1f, 0x1a, 0x19,
		0x08, 0x4d, 0xaa, 0x23, 0x73, 0x65, 0x69, 0x1d, 0x44, 0xd7, 0xea, 0x3b, 0x1a, 0x52, 0x34, 0xab,
		0x83, 0x14, 0xdd, 0xdc, 0xb3, 0xca, 0x79, 0x42, 0x70, 0x62, 0x78, 0x22, 0x44, 0xb1, 0x6e, 0x75,
		0xd0, 0xba, 0xb9, 0x67, 0xc9, 0x25, 0x37, 0xf4, 0x2c, 0xcd, 0xc1, 0xb8, 0x7b, 0x60, 0x7a, 0xea,
		0x8b, 0xe5, 0x22, 0x89, 0x10, 0xf6, 0x54, 0xf9, 0xce, 0x38, 0x4c, 0x25, 0x09, 0xb1, 0x4b, 0x90,
		0xdd, 0xc3, 0xb3, 0x2c, 0xa7, 0x8e, 0xe2, 0x03, 0x8a, 0x09, 0x3b, 0x71, 0xfc, 0x5d, 0x3a, 0xb1,
		0x06, 0x05, 0x13, 0xb9, 0x1e, 0xea, 0xd0, 0x88, 0x48, 0x27, 0x8c, 0x29, 0xa0, 0xa0, 0xe1, 0x90,
		0xca, 0xbc, 0xab, 0x90, 0x7a, 0x0e, 0xa6, 0x7c, 0x93, 0x14, 0x47, 0x35, 0xbb, 0x3c, 0x36, 0x4f,
		0xc7, 0x59, 0xb2, 0xdc, 0xe0, 0x38, 0x19, 0xc3, 0xe4, 0x12, 0x0a, 0x3d, 0x4b, 0xab, 0x00, 0x96,
		0x89, 0xac, 0x3d, 0xa5, 0x83, 0x34, 0xa3, 0x9c, 0x3b, 0xc4, 0x4b, 0x4d, 0xac, 0x32, 0xe4, 0x25,
		0x8b, 0x4a, 0x35, 0x43, 0xba, 0x38, 0x08, 0xb5, 0x89, 0x43, 0x22, 0x65, 0x93, 0x6e, 0xb2, 0xa1,
		0x68, 0x6b, 0x43, 0xc9, 0x41, 0x38, 0xee, 0x51, 0x87, 0xcd, 0x2c, 0x4f, 0x8c, 0x58, 0x8e, 0x9d,
		0x99, 0xcc, 0x60, 0x74, 0x62, 0x93, 0x4e, 0xf0, 0x51, 0x7a, 0x18, 0x7c, 0x81, 0x42, 0xc2, 0x0a,
		0x48, 0x16, 0x2a, 0x72, 0xe1, 0x96, 0xda, 0x43, 0xf3, 0x37, 0xa1, 0x14, 0x76, 0x8f, 0x34, 0x0b,
		0x59, 0xd7, 0x53, 0x1d, 0x8f, 0x44, 0x61, 0x56, 0xa6, 0x0f, 0x92, 0x08, 0x69, 0x64, 0x76, 0x48,
		0x96, 0xcb, 0xca, 0xf8, 0x4f, 0xe9, 0x93, 0x83, 0x09, 0xa7, 0xc9, 0x84, 0x3f, 0x3c, 0xbc, 0xa2,
		0x21, 0xe6, 0xe8, 0xbc, 0xe7, 0x2f, 0xc0, 0x64, 0x68, 0x02, 0x49, 0x5f, 0x5d, 0xf9, 0x19, 0x78,
		0x60, 0x24, 0xb5, 0xf4, 0x1c, 0xcc, 0xf6, 0x4d, 0xdd, 0xf4, 0x90, 0x63, 0x3b, 0x08, 0x47, 0x2c,
		0x7d, 0x55, 0xf9, 0x5f, 0x27, 0x0e, 0x89, 0xb9, 0x76, 0x50, 0x9b, 0xb2, 0xc8, 0x33, 0xfd, 0x61,
		0xe1, 0xa9, 0x7c, 0xee, 0xdf, 0x26, 0xc4, 0x5b, 0xb7, 0x6e, 0xdd, 0x4a, 0x55, 0xbe, 0x38, 0x0e,
		0xb3, 0xa3, 0xf6, 0xcc, 0xc8, 0xed, 0x3b, 0x07, 0xe3, 0x66, 0xbf, 0xb7, 0x8b, 0x1c, 0xe2, 0xa4,
		0xac, 0xcc, 0x9e, 0xa4, 0x1a, 0x64, 0x0d, 0x75, 0x17, 0x19, 0xe5, 0xcc, 0xa2, 0xb0, 0x54, 0x3a,
		0xf3, 0x44, 0xa2, 0x5d, 0xb9, 0xbc, 0x81, 0x21, 0x32, 0x45, 0x4a, 0x9f, 0x80, 0x0c, 0x4b, 0xd1,
		0x98, 0xe1, 0x54, 0x32, 0x06, 0xbc, 0x97, 0x64, 0x82, 0x93, 0x1e, 0x84, 0x3c, 0xfe, 0x97, 0xc6,
		0xc6, 0x38, 0xb1, 0x39, 0x87, 0x05, 0x38, 0x2e, 0xa4, 0x79, 0xc8, 0x91, 0x6d, 0xd2, 0x41, 0xbc,
		0xb4, 0xf9, 0xcf, 0x38, 0xb0, 0x3a, 0x68, 0x4f, 0xed, 0x1b, 0x9e, 0x72, 0x5d, 0x35, 0xfa, 0x88,
		0x04, 0x7c, 0x5e, 0x2e, 0x32, 0xe1, 0xa7, 0xb1, 0x4c, 0x3a, 0x01, 0x05, 0xba, 0xab, 0x74, 0xb3,
		0x83, 0x5e, 0x24, 0xd9, 0x33, 0x2b, 0xd3, 0x8d, 0xb6, 0x8e, 0x25, 0xf8, 0xf5, 0x57, 0x5d, 0xcb,
		0xe4, 0xa1, 0x49, 0x5e, 0x81, 0x05, 0xe4, 0xf5, 0x17, 0xa2, 0x89, 0xfb, 0xa1, 0xd1, 0xd3, 0x8b,
		0xc6, 0x54, 0xe5, 0x5b, 0x29, 0xc8, 0x90, 0x7c, 0x31, 0x05, 0x85, 0x9d, 0xe7, 0xb7, 0x1b, 0xca,
		0x6a, 0xb3, 0xbd, 0xb2, 0xd1, 0x10, 0x05, 0xa9, 0x04, 0x40, 0x04, 0x97, 0x37, 0x9a, 0xb5, 0x1d,
		0x31, 0xe5, 0x3f, 0xaf, 0x6f, 0xed, 0x9c, 0x3f, 0x2b, 0xa6, 0x7d, 0x40, 0x9b, 0x0a, 0x32, 0x41,
		0x85, 0x27, 0xcf, 0x88, 0x59, 0x49, 0x84, 0x22, 0x25, 0x58, 0x7f, 0xae, 0xb1, 0x7a, 0xfe, 0xac,
		0x38, 0x1e, 0x96, 0x3c, 0x79, 0x46, 0x9c, 0x90, 0x26, 0x21, 0x4f, 0x24, 0x2b, 0xcd, 0xe6, 0x86,
		0x98, 0xf3, 0x39, 0x5b, 0x3b, 0xf2, 0xfa, 0xd6, 0x9a, 0x98, 0xf7, 0x39, 0xd7, 0xe4, 0x66, 0x7b,
		0x5b, 0x04, 0x9f, 0x61, 0xb3, 0xd1, 0x6a, 0xd5, 0xd6, 0x1a, 0x62, 0xc1, 0xd7, 0x58, 0x79, 0x7e,
		0xa7, 0xd1, 0x12, 0x8b, 0x21, 0xb3, 0x9e, 0x3c, 0x23, 0x4e, 0xfa, 0xaf, 0x68, 0x6c, 0xb5, 0x37,
		0xc5, 0x92, 0x34, 0x0d, 0x93, 0xf4, 0x15, 0xdc, 0x88, 0xa9, 0x88, 0xe8, 0xfc, 0x59, 0x51, 0x1c,
		0x18, 0x42, 0x59, 0xa6, 0x43, 0x82, 0xf3, 0x67, 0x45, 0xa9, 0x52, 0x87, 0x2c, 0x89, 0x2e, 0x49,
		0x82, 0xd2, 0x46, 0x6d, 0xa5, 0xb1, 0xa1, 0x34, 0xb7, 0x77, 0xd6, 0x9b, 0x5b, 0xb5, 0x0d, 0x51,
		0x18, 0xc8, 0xe4, 0xc6, 0xa7, 0xda, 0xeb, 0x72, 0x63, 0x55, 0x4c, 0x05, 0x65, 0xdb, 0x8d, 0xda,
		0x4e, 0x63, 0x55, 0x4c, 0x57, 0x34, 0x98, 0x1d, 0x95, 0x27, 0x47, 0xee, 0x8c, 0xc0, 0x12, 0xa7,
		0x0e, 0x59, 0x62, 0xc2, 0x35, 0xb4, 0xc4, 0xff, 0x92, 0x82, 0x99, 0x11, 0xb5, 0x62, 0xe4, 0x4b,
		0x9e, 0x86, 0x2c, 0x0d, 0x51, 0x5a, 0x3d, 0x1f, 0x1f, 0x59, 0x74, 0x48, 0xc0, 0x0e, 0x55, 0x50,
		0x82, 0x0b, 0x76, 0x10, 0xe9, 0x43, 0x3a, 0x08, 0x4c, 0x31, 0x94, 0xd3, 0x7f, 0x7a, 0x28, 0xa7,
		0xd3, 0xb2, 0x77, 0x3e, 0x49, 0xd9, 0x23, 0xb2, 0xa3, 0xe5, 0xf6, 0xec, 0x88, 0xdc, 0x7e, 0x09,
		0xa6, 0x87, 0x88, 0x12, 0xe7, 0xd8, 0x97, 0x04, 0x28, 0x1f, 0xe6, 0x9c, 0x98, 0x4c, 0x97, 0x0a,
		0x65, 0xba, 0x4b, 0x51, 0x0f, 0x9e, 0x3c, 0x7c, 0x11, 0x86, 0xd6, 0xfa, 0x35, 0x01, 0xe6, 0x46,
		0x77, 0x8a, 0x23, 0x6d, 0xf8, 0x04, 0x8c, 0xf7, 0x90, 0xb7, 0x6f, 0xf1, 0x6e, 0xe9, 0xc3, 0x23,
		0x6a, 0x30, 0x1e, 0x8e, 0x2e, 0x36, 0x43, 0x05, 0x8b, 0x78, 0xfa, 0xb0, 0x76, 0x8f, 0x5a, 0x33,
		0x64, 0xe9, 0xe7, 0x52, 0xf0, 0xc0, 0x48, 0xf2, 0x91, 0x86, 0x3e, 0x04, 0xa0, 0x9b, 0x76, 0xdf,
		0xa3, 0x1d, 0x11, 0x4d, 0xb0, 0x79, 0x22, 0x21, 0xc9, 0x0b, 0x27, 0xcf, 0xbe, 0xe7, 0x8f, 0xa7,
		0xc9, 0x38, 0x50, 0x11, 0x51, 0x78, 0x6a, 0x60, 0x68, 0x86, 0x18, 0xba, 0x70, 0xc8, 0x4c, 0x87,
		0x02, 0xf3, 0x63, 0x20, 0x6a, 0x86, 0x8e, 0x4c, 0x4f, 0x71, 0x3d, 0x07, 0xa9, 0x3d, 0xdd, 0xec,
		0x92, 0x0a, 0x92, 0xab, 0x66, 0xf7, 0x54, 0xc3, 0x45, 0xf2, 0x14, 0x1d, 0x6e, 0xf1, 0x51, 0x8c,
		0x20, 0x01, 0xe4, 0x04, 0x10, 0xe3, 0x21, 0x04, 0x1d, 0xf6, 0x11, 0x95, 0x5f, 0xcd, 0x43, 0x21,
		0xd0, 0x57, 0x4b, 0x27, 0xa1, 0x78, 0x55, 0xbd, 0xae, 0x2a, 0xfc, 0xac, 0x44, 0x3d, 0x51, 0xc0,
		0xb2, 0x6d, 0x76, 0x5e, 0xfa, 0x18, 0xcc, 0x12, 0x15, 0xab, 0xef, 0x21, 0x47, 0xd1, 0x0c, 0xd5,
		0x75, 0x89, 0xd3, 0x72, 0x44, 0x55, 0xc2, 0x63, 0x4d, 0x3c, 0x54, 0xe7, 0x23, 0xd2, 0x39, 0x98,
		0x21, 0x88, 0x5e, 0xdf, 0xf0, 0x74, 0xdb, 0x40, 0x0a, 0x3e, 0xbd, 0xb9, 0xa4, 0x92, 0xf8, 0x96,
		0x4d, 0x63, 0x8d, 0x4d, 0xa6, 0x80, 0x2d, 0x72, 0xa5, 0x55, 0x78, 0x88, 0xc0, 0xba, 0xc8, 0x44,
		0x8e, 0xea, 0x21, 0x05, 0x7d, 0xb6, 0xaf, 0x1a, 0xae, 0xa2, 0x9a, 0x1d, 0x65, 0x5f, 0x75, 0xf7,
		0xcb, 0xb3, 0x98, 0x60, 0x25, 0x55, 0x16, 0xe4, 0xe3, 0x58, 0x71, 0x8d, 0xe9, 0x35, 0x88, 0x5a,
		0xcd, 0xec, 0x3c, 0xa3, 0xba, 0xfb, 0x52, 0x15, 0xe6, 0x08, 0x8b, 0xeb, 0x39, 0xba, 0xd9, 0x55,
		0xb4, 0x7d, 0xa4, 0x5d, 0x53, 0xfa, 0xde, 0xde, 0x53, 0xe5, 0x07, 0x83, 0xef, 0x27, 0x16, 0xb6,
		0x88, 0x4e, 0x1d, 0xab, 0xb4, 0xbd, 0xbd, 0xa7, 0xa4, 0x16, 0x14, 0xf1, 0x62, 0xf4, 0xf4, 0x9b,
		0x48, 0xd9, 0xb3, 0x1c, 0x52, 0x1a, 0x4b, 0x23, 0x52, 0x53, 0xc0, 0x83, 0xcb, 0x4d, 0x06, 0xd8,
		0xb4, 0x3a, 0xa8, 0x9a, 0x6d, 0x6d, 0x37, 0x1a, 0xab, 0x72, 0x81, 0xb3, 0x5c, 0xb6, 0x1c, 0x1c,
		0x50, 0x5d, 0xcb, 0x77, 0x70, 0x81, 0x06, 0x54, 0xd7, 0xe2, 0xee, 0x3d, 0x07, 0x33, 0x9a, 0x46,
		0xe7, 0xac, 0x6b, 0x0a, 0x3b, 0x63, 0xb9, 0x65, 0x31, 0xe4, 0x2c, 0x4d, 0x5b, 0xa3, 0x0a, 0x2c,
		0xc6, 0x5d, 0xe9, 0x22, 0x3c, 0x30, 0x70, 0x56, 0x10, 0x38, 0x3d, 0x34, 0xcb, 0x28, 0xf4, 0x1c,
		0xcc, 0xd8, 0x07, 0xc3, 0x40, 0x29, 0xf4, 0x46, 0xfb, 0x20, 0x0a, 0xbb, 0x00, 0xb3, 0xf6, 0xbe,
		0x3d, 0x8c, 0x3b, 0x15, 0xc4, 0x49, 0xf6, 0xbe, 0x1d, 0x05, 0x3e, 0x4a, 0x0e, 0xdc, 0x0e, 0xd2,
		0x54, 0x0f, 0x75, 0xca, 0xc7, 0x82, 0xea, 0x81, 0x01, 0xe9, 0x34, 0x88, 0x9a, 0xa6, 0x20, 0x53,
		0xdd, 0x35, 0x90, 0xa2, 0x3a, 0xc8, 0x54, 0xdd, 0xf2, 0x89, 0xa0, 0x72, 0x49, 0xd3, 0x1a, 0x64,
		0xb4, 0x46, 0x06, 0xa5, 0x53, 0x30, 0x6d, 0xed, 0x5e, 0xd5, 0x68, 0x48, 0x2a, 0xb6, 0x83, 0xf6,
		0xf4, 0x17, 0xcb, 0x8f, 0x10, 0xff, 0x4e, 0xe1, 0x01, 0x12, 0x90, 0xdb, 0x44, 0x2c, 0x3d, 0x0e,
		0xa2, 0xe6, 0xee, 0xab, 0x8e, 0x4d, 0x72, 0xb2, 0x6b, 0xab, 0x1a, 0x2a, 0x3f, 0x4a, 0x55, 0xa9,
		0x7c, 0x8b, 0x8b, 0xf1, 0x96, 0x70, 0x6f, 0xe8, 0x7b, 0x1e, 0x67, 0x7c, 0x8c, 0x6e, 0x09, 0x22,
		0x63, 0x6c, 0x4b, 0x20, 0x62, 0x57, 0x84, 0x5e, 0xbc, 0x44, 0xd4, 0x4a, 0xf6, 0xbe, 0x1d, 0x7c,
		0xef, 0xc3, 0x30, 0x89, 0x35, 0x07, 0x2f, 0x7d, 0x9c, 0x36, 0x64, 0xf6, 0x7e, 0xe0, 0x8d, 0x67,
		0x61, 0x0e, 0x2b, 0xf5, 0x90, 0xa7, 0x76, 0x54, 0x4f, 0x0d, 0x68, 0x7f, 0x84, 0x68, 0x63, 0xbf,
		0x6f, 0xb2, 0xc1, 0x90, 0x9d, 0x4e, 0x7f, 0xf7, 0xc0, 0x8f, 0xac, 0x8f, 0x52, 0x3b, 0xb1, 0x8c,
		0xc7, 0xd6, 0x7b, 0xd6, 0x74, 0x57, 0xaa, 0x50, 0x0c, 0x06, 0xbe, 0x94, 0x07, 0x1a, 0xfa, 0xa2,
		0x80, 0xbb, 0xa0, 0x7a, 0x73, 0x15, 0xf7, 0x2f, 0x2f, 0x34, 0xc4, 0x14, 0xee, 0xa3, 0x36, 0xd6,
		0x77, 0x1a, 0x8a, 0xdc, 0xde, 0xda, 0x59, 0xdf, 0x6c, 0x88, 0xe9, 0x60, 0xc3, 0xfe, 0xbd, 0x14,
		0x94, 0xc2, 0x67, 0x2f, 0xe9, 0x27, 0xe1, 0x18, 0xbf, 0x28, 0x71, 0x91, 0xa7, 0xdc, 0xd0, 0x1d,
		0xb2, 0x17, 0x7b, 0x2a, 0xad, 0x8b, 0x7e, 0x34, 0xcc, 0x32, 0xad, 0x16, 0xf2, 0x9e, 0xd5, 0x1d,
		0xbc, 0xd3, 0x7a, 0xaa, 0x27, 0x6d, 0xc0, 0x09, 0xd3, 0x52, 0x5c, 0x4f, 0x35, 0x3b, 0xaa, 0xd3,
		0x51, 0x06, 0x57, 0x54, 0x8a, 0xaa, 0x69, 0xc8, 0x75, 0x2d, 0x5a, 0x03, 0x7d, 0x96, 0x0f, 0x99,
		0x56, 0x8b, 0x29, 0x0f, 0x8a, 0x43, 0x8d, 0xa9, 0x46, 0x22, 0x37, 0x7d, 0x58, 0xe4, 0x3e, 0x08,
		0xf9, 0x9e, 0x6a, 0x2b, 0xc8, 0xf4, 0x9c, 0x03, 0xd2, 0x71, 0xe7, 0xe4, 0x5c, 0x4f, 0xb5, 0x1b,
		0xf8, 0xf9, 0xfd, 0x39, 0xf8, 0xfc, 0x73, 0x1a, 0x8a, 0xc1, 0xae, 0x1b, 0x1f, 0x62, 0x34, 0x52,
		0xa0, 0x04, 0x92, 0xc2, 0x1e, 0xbe, 0x6f, 0x8f, 0xbe, 0x5c, 0xc7, 0x95, 0xab, 0x3a, 0x4e, 0x7b,
		0x61, 0x99, 0x22, 0x71, 0xd7, 0x80, 0x43, 0x0b, 0xd1, 0xde, 0x23, 0x27, 0xb3, 0x27, 0x69, 0x0d,
		0xc6, 0xaf, 0xba, 0x84, 0x7b, 0x9c, 0x70, 0x3f, 0x72, 0x7f, 0xee, 0x2b, 0x2d, 0x42, 0x9e, 0xbf,
		0xd2, 0x52, 0xb6, 0x9a, 0xf2, 0x66, 0x6d, 0x43, 0x66, 0x70, 0xe9, 0x38, 0x64, 0x0c, 0xf5, 0xe6,
		0x41, 0xb8, 0xc6, 0x11, 0x51, 0x52, 0xc7, 0x1f, 0x87, 0xcc, 0x0d, 0xa4, 0x5e, 0x0b, 0x57, 0x16,
		0x22, 0x7a, 0x0f, 0x43, 0xff, 0x34, 0x64, 0x89, 0xbf, 0x24, 0x00, 0xe6, 0x31, 0x71, 0x4c, 0xca,
		0x41, 0xa6, 0xde, 0x94, 0x71, 0xf8, 0x8b, 0x50, 0xa4, 0x52, 0x65, 0x7b, 0xbd, 0x51, 0x6f, 0x88,
		0xa9, 0xca, 0x39, 0x18, 0xa7, 0x4e, 0xc0, 0x5b, 0xc3, 0x77, 0x83, 0x38, 0xc6, 0x1e, 0x19, 0x87,
		0xc0, 0x47, 0xdb, 0x9b, 0x2b, 0x0d, 0x59, 0x4c, 0x05, 0x97, 0xd7, 0x85, 0x62, 0xb0, 0xe1, 0x7e,
		0x7f, 0x62, 0xea, 0xbb, 0x02, 0x14, 0x02, 0x0d, 0x34, 0xee, 0x7c, 0x54, 0xc3, 0xb0, 0x6e, 0x28,
		0xaa, 0xa1, 0xab, 0x2e, 0x0b, 0x0a, 0x20, 0xa2, 0x1a, 0x96, 0x24, 0x5d, 0xb4, 0xf7, 0xc5, 0xf8,
		0x57, 0x05, 0x10, 0xa3, 0xbd, 0x6b, 0xc4, 0x40, 0xe1, 0x03, 0x35, 0xf0, 0x15, 0x01, 0x4a, 0xe1,
		0x86, 0x35, 0x62, 0xde, 0xc9, 0x0f, 0xd4, 0xbc, 0x37, 0x53, 0x30, 0x19, 0x6a, 0x53, 0x93, 0x5a,
		0xf7, 0x59, 0x98, 0xd6, 0x3b, 0xa8, 0x67, 0x5b, 0x1e, 0x32, 0xb5, 0x03, 0xc5, 0x40, 0xd7, 0x91,
		0x51, 0xae, 0x90, 0x44, 0x71, 0xfa, 0xfe, 0x8d, 0xf0, 0xf2, 0xfa, 0x00, 0xb7, 0x81, 0x61, 0xd5,
		0x99, 0xf5, 0xd5, 0xc6, 0xe6, 0x76, 0x73, 0xa7, 0xb1, 0x55, 0x7f, 0x5e, 0x69, 0x6f, 0xfd, 0xd4,
		0x56, 0xf3, 0xd9, 0x2d, 0x59, 0xd4, 0x23, 0x6a, 0xef, 0xe1, 0x56, 0xdf, 0x06, 0x31, 0x6a, 0x94,
		0x74, 0x0c, 0x46, 0x99, 0x25, 0x8e, 0x49, 0x33, 0x30, 0xb5, 0xd5, 0x54, 0x5a, 0xeb, 0xab, 0x0d,
		0xa5, 0x71, 0xf9, 0x72, 0xa3, 0xbe, 0xd3, 0xa2, 0x57, 0x1b, 0xbe, 0xf6, 0x4e, 0x78, 0x53, 0xbf,
		0x9c, 0x86, 0x99, 0x11, 0x96, 0x48, 0x35, 0x76, 0x28, 0xa1, 0xe7, 0xa4, 0x8f, 0x26, 0xb1, 0x7e,
		0x19, 0x77, 0x05, 0xdb, 0xaa, 0xe3, 0xb1, 0x33, 0xcc, 0xe3, 0x80, 0xbd, 0x64, 0x7a, 0xfa, 0x9e,
		0x8e, 0x1c, 0x76, 0x13, 0x44, 0x4f, 0x2a, 0x53, 0x03, 0x39, 0xbd, 0x0c, 0xfa, 0x08, 0x48, 0xb6,
		0xe5, 0xea, 0x9e, 0x7e, 0x1d, 0x29, 0xba, 0xc9, 0xaf, 0x8d, 0xf0, 0xc9, 0x25, 0x23, 0x8b, 0x7c,
		0x64, 0xdd, 0xf4, 0x7c, 0x6d, 0x13, 0x75, 0xd5, 0x88, 0x36, 0x4e, 0xe0, 0x69, 0x59, 0xe4, 0x23,
		0xbe, 0xf6, 0x49, 0x28, 0x76, 0xac, 0x3e, 0x6e, 0xe7, 0xa8, 0x1e, 0xae, 0x17, 0x82, 0x5c, 0xa0,
		0x32, 0x5f, 0x85, 0x35, 0xea, 0x83, 0xfb, 0xaa, 0xa2, 0x5c, 0xa0, 0x32, 0xaa, 0xf2, 0x18, 0x4c,
		0xa9, 0xdd, 0xae, 0x83, 0xc9, 0x39, 0x11, 0x3d, 0x7a, 0x94, 0x7c, 0x31, 0x51, 0x9c, 0xbf, 0x02,
		0x39, 0xee, 0x07, 0x5c, 0x92, 0xb1, 0x27, 0x14, 0x9b, 0x9e, 0xa7, 0x53, 0x4b, 0x79, 0x39, 0x67,
		0xf2, 0xc1, 0x93, 0x50, 0xd4, 0x5d, 0x65, 0x70, 0xfd, 0x9e, 0x5a, 0x4c, 0x2d, 0xe5, 0xe4, 0x82,
		0xee, 0xfa, 0x57, 0x97, 0x95, 0xd7, 0x52, 0x50, 0x0a, 0x7f, 0x3e, 0x90, 0x56, 0x21, 0x67, 0x58,
		0x9a, 0x4a, 0x42, 0x8b, 0x7e, 0xbb, 0x5a, 0x8a, 0xf9, 0xe2, 0xb0, 0xbc, 0xc1, 0xf4, 0x65, 0x1f,
		0x39, 0xff, 0x8f, 0x02, 0xe4, 0xb8, 0x58, 0x9a, 0x83, 0x8c, 0xad, 0x7a, 0xfb, 0x84, 0x2e, 0xbb,
		0x92, 0x12, 0x05, 0x99, 0x3c, 0x63, 0xb9, 0x6b, 0xab, 0x26, 0x09, 0x01, 0x26, 0xc7, 0xcf, 0x78,
		0x5d, 0x0d, 0xa4, 0x76, 0xc8, 0xb9, 0xc6, 0xea, 0xf5, 0x90, 0xe9, 0xb9, 0x7c, 0x5d, 0x99, 0xbc,
		0xce, 0xc4, 0xd2, 0x13, 0x30, 0xed, 0x39, 0xaa, 0x6e, 0x84, 0x74, 0x33, 0x44, 0x57, 0xe4, 0x03,
		0xbe, 0x72, 0x15, 0x8e, 0x73, 0xde, 0x0e, 0xf2, 0x54, 0x6d, 0x1f, 0x75, 0x06, 0xa0, 0x71, 0x72,
		0x7f, 0x71, 0x8c, 0x29, 0xac, 0xb2, 0x71, 0x8e, 0xad, 0x7c, 0x5f, 0x80, 0x69, 0x7e, 0x12, 0xeb,
		0xf8, 0xce, 0xda, 0x04, 0x50, 0x4d, 0xd3, 0xf2, 0x82, 0xee, 0x1a, 0x0e, 0xe5, 0x21, 0xdc, 0x72,
		0xcd, 0x07, 0xc9, 0x01, 0x82, 0xf9, 0x1e, 0xc0, 0x60, 0xe4, 0x50, 0xb7, 0x9d, 0x80, 0x02, 0xfb,
		0x36, 0x44, 0x3e, 0x30, 0xd2, 0xb3, 0x3b, 0x50, 0x11, 0x3e, 0xb2, 0x49, 0xb3, 0x90, 0xdd, 0x45,
		0x5d, 0xdd, 0x64, 0x37, 0xbe, 0xf4, 0x81, 0xdf, 0xb0, 0x64, 0xfc, 0x1b, 0x96, 0x95, 0xcf, 0xc0,
		0x8c, 0x66, 0xf5, 0xa2, 0xe6, 0xae, 0x88, 0x91, 0xfb, 0x03, 0xf7, 0x19, 0xe1, 0x05, 0x18, 0xb4,
		0x98, 0x3f, 0x12, 0x84, 0xaf, 0xa6, 0xd2, 0x6b, 0xdb, 0x2b, 0x5f, 0x4f, 0xcd, 0xaf, 0x51, 0xe8,
		0x36, 0x9f, 0xa9, 0x8c, 0xf6, 0x0c, 0xa4, 0x61, 0xeb, 0xe1, 0x87, 0x4f, 0xc0, 0xb9, 0xae, 0xee,
		0xed, 0xf7, 0x77, 0x97, 0x35, 0xab, 0x77, 0x5a, 0xb3, 0xb4, 0x6b, 0x8e, 0xa5, 0x6a, 0xfb, 0x9d,
		0xdd, 0xd3, 0x5d, 0xab, 0x6b, 0x91, 0xb7, 0x45, 0xfe, 0x62, 0xdf, 0x57, 0xf3, 0xbe, 0x74, 0x3e,
		0xf6, 0x63, 0x6c, 0x75, 0x0b, 0x66, 0x98, 0xb2, 0x42, 0x3e, 0xf0, 0xd0, 0x63, 0x8a, 0x74, 0xdf,
		0x4b, 0xb2, 0xf2, 0x37, 0xdf, 0x22, 0x65, 0x5b, 0x9e, 0x66, 0x50, 0x3c, 0x46, 0x4f, 0x32, 0x55,
		0x19, 0x1e, 0x08, 0xf1, 0xd1, 0x2d, 0x8a, 0x9c, 0x18, 0xc6, 0xef, 0x31, 0xc6, 0x99, 0x00, 0x63,
		0x8b, 0x41, 0xab, 0x75, 0x98, 0x3c, 0x0a, 0xd7, 0xdf, 0x33, 0xae, 0x22, 0x0a, 0x92, 0xac, 0xc1,
		0x14, 0x21, 0xd1, 0xfa, 0xae, 0x67, 0xf5, 0x48, 0xfe, 0xbb, 0x3f, 0xcd, 0x3f, 0xbc, 0x45, 0xf7,
		0x4c, 0x09, 0xc3, 0xea, 0x3e, 0xaa, 0x5a, 0x05, 0xf2, 0x4d, 0xab, 0x83, 0x34, 0x23, 0x86, 0xe1,
		0x75, 0x66, 0x88, 0xaf, 0x5f, 0xfd, 0x34, 0xcc, 0xe2, 0xbf, 0x49, 0x7a, 0x0a, 0x5a, 0x12, 0x7f,
		0xa3, 0x56, 0xfe, 0xfe, 0x4b, 0x74, 0x5b, 0xce, 0xf8, 0x04, 0x01, 0x9b, 0x02, 0xab, 0xd8, 0x45,
		0x9e, 0x87, 0x1c, 0x57, 0x51, 0x8d, 0x51, 0xe6, 0x05, 0xae, 0x24, 0xca, 0x5f, 0x7a, 0x3b, 0xbc,
		0x8a, 0x6b, 0x14, 0x59, 0x33, 0x8c, 0x6a, 0x1b, 0x8e, 0x8d, 0x88, 0x8a, 0x04, 0x9c, 0x2f, 0x33,
		0xce, 0xd9, 0xa1, 0xc8, 0xc0, 0xb4, 0xdb, 0xc0, 0xe5, 0xfe, 0x5a, 0x26, 0xe0, 0xfc, 0x5d, 0xc6,
		0x29, 0x31, 0x2c, 0x5f, 0x52, 0xcc, 0x78, 0x05, 0xa6, 0xaf, 0x23, 0x67, 0xd7, 0x72, 0xd9, 0x35,
		0x50, 0x02, 0xba, 0x57, 0x18, 0xdd, 0x14, 0x03, 0x92, 0x7b, 0x21, 0xcc, 0x75, 0x11, 0x72, 0x7b,
		0xaa, 0x86, 0x12, 0x50, 0x7c, 0x99, 0x51, 0x4c, 0x60, 0x7d, 0x0c, 0xad, 0x41, 0xb1, 0x6b, 0xb1,
		0x0a, 0x15, 0x0f, 0x7f, 0x95, 0xc1, 0x0b, 0x1c, 0xc3, 0x28, 0x6c, 0xcb, 0xee, 0x1b, 0xb8, 0x7c,
		0xc5, 0x53, 0xfc, 0x1e, 0xa7, 0xe0, 0x18, 0x46, 0x71, 0x04, 0xb7, 0x7e, 0x85, 0x53, 0xb8, 0x01,
		0x7f, 0x3e, 0x0d, 0x05, 0xcb, 0x34, 0x0e, 0x2c, 0x33, 0x89, 0x11, 0xb7, 0x19, 0x03, 0x30, 0x08,
		0x26, 0xb8, 0x04, 0xf9, 0xa4, 0x0b, 0xf1, 0x07, 0x6f, 0xf3, 0xed, 0xc1, 0x57, 0x60, 0x0d, 0xa6,
		0x78, 0x82, 0xd2, 0x2d, 0x33, 0x01, 0xc5, 0x1f, 0x32, 0x8a, 0x52, 0x00, 0xc6, 0xa6, 0xe1, 0x21,
		0xd7, 0xeb, 0xa2, 0x24, 0x24, 0xaf, 0xf1, 0x69, 0x30, 0x08, 0x73, 0xe5, 0x2e, 0x32, 0xb5, 0xfd,
		0x64, 0x0c, 0x5f, 0xe3, 0xae, 0xe4, 0x18, 0x4c, 0x51, 0x87, 0xc9, 0x9e, 0xea, 0xb8, 0xfb, 0xaa,
		0x91, 0x68, 0x39, 0xfe, 0x88, 0x71, 0x14, 0x7d, 0x10, 0xf3, 0x48, 0xdf, 0x3c, 0x0a, 0xcd, 0xd7,
		0xb9, 0x47, 0x02, 0x30, 0xb6, 0xf5, 0x5c, 0x8f, 0xdc, 0x99, 0x1d, 0x85, 0xed, 0x8f, 0xf9, 0xd6,
		0xa3, 0xd8, 0xcd, 0x20, 0xe3, 0x25, 0xc8, 0xbb, 0xfa, 0xcd, 0x44, 0x34, 0x7f, 0xc2, 0x57, 0x9a,
		0x00, 0x30, 0xf8, 0x79, 0x38, 0x3e, 0xb2, 0x4c, 0x24, 0x20, 0xfb, 0x53, 0x46, 0x36, 0x37, 0xa2,
		0x54, 0xb0, 0x94, 0x70, 0x54, 0xca, 0x3f, 0xe3, 0x29, 0x01, 0x45, 0xb8, 0xb6, 0xf1, 0x99, 0xc1,
		0x55, 0xf7, 0x8e, 0xe6, 0xb5, 0x3f, 0xe7, 0x5e, 0xa3, 0xd8, 0x90, 0xd7, 0x76, 0x60, 0x8e, 0x31,
		0x1e, 0x6d, 0x5d, 0xbf, 0xc1, 0x13, 0x2b, 0x45, 0xb7, 0xc3, 0xab, 0xfb, 0x19, 0x98, 0xf7, 0xdd,
		0xc9, 0x9b, 0x53, 0x57, 0xe9, 0xa9, 0x76, 0x02, 0xe6, 0x6f, 0x32, 0x66, 0x9e, 0xf1, 0xfd, 0xee,
		0xd6, 0xdd, 0x54, 0x6d, 0x4c, 0xfe, 0x1c, 0x94, 0x39, 0x79, 0xdf, 0x74, 0x90, 0x66, 0x75, 0x4d,
		0xfd, 0x26, 0xea, 0x24, 0xa0, 0xfe, 0x8b, 0xc8, 0x52, 0xb5, 0x03, 0x70, 0xcc, 0xbc, 0x0e, 0xa2,
		0xdf, 0xab, 0x28, 0x7a, 0xcf, 0xb6, 0x1c, 0x2f, 0x86, 0xf1, 0x2f, 0xf9, 0x4a, 0xf9, 0xb8, 0x75,
		0x02, 0xab, 0x36, 0xa0, 0x44, 0x1e, 0x93, 0x86, 0xe4, 0x5f, 0x31, 0xa2, 0xc9, 0x01, 0x8a, 0x25,
		0x0e, 0xcd, 0xea, 0xd9, 0xaa, 0x93, 0x24, 0xff, 0xfd, 0x35, 0x4f, 0x1c, 0x0c, 0xc2, 0x12, 0x87,
		0x77, 0x60, 0x23, 0x5c, 0xed, 0x13, 0x30, 0x7c, 0x8b, 0x27, 0x0e, 0x8e, 0x61, 0x14, 0xbc, 0x61,
		0x48, 0x40, 0xf1, 0x37, 0x9c, 0x82, 0x63, 0x30, 0xc5, 0xa7, 0x06, 0x85, 0xd6, 0x41, 0x5d, 0xdd,
		0xf5, 0x1c, 0xda, 0x12, 0xdf, 0x9f, 0xea, 0xdb, 0x6f, 0x87, 0x9b, 0x30, 0x39, 0x00, 0xc5, 0x99,
		0x88, 0x5d, 0xa5, 0x92, 0x13, 0x53, 0xbc, 0x61, 0xdf, 0xe1, 0x99, 0x28, 0x00, 0xc3, 0xb6, 0x05,
		0x3a, 0x44, 0xec, 0x76, 0x0d, 0x9f, 0x13, 0x12, 0xd0, 0x7d, 0x37, 0x62, 0x5c, 0x8b, 0x63, 0x31,
		0x67, 0xa0, 0xff, 0xe9, 0x9b, 0xd7, 0xd0, 0x41, 0xa2, 0xe8, 0xfc, 0xdb, 0x48, 0xff, 0xd3, 0xa6,
		0x48, 0x9a, 0x43, 0xa6, 0x22, 0xfd, 0x94, 0x14, 0xf7, 0x6b, 0xa0, 0xf2, 0xcf, 0xdd, 0x63, 0xf3,
		0x0d, 0xb7, 0x53, 0xd5, 0x0d, 0x1c, 0xe4, 0xe1, 0xa6, 0x27, 0x9e, 0xec, 0xa5, 0x7b, 0x7e, 0x9c,
		0x87, 0x7a, 0x9e, 0xea, 0x65, 0x98, 0x0c, 0x35, 0x3c, 0xf1, 0x54, 0x3f, 0xcf, 0xa8, 0x8a, 0xc1,
		0x7e, 0xa7, 0x7a, 0x0e, 0x32, 0xb8, 0x79, 0x89, 0x87, 0xff, 0x02, 0x83, 0x13, 0xf5, 0xea, 0xc7,
		0x21, 0xc7, 0x9b, 0x96, 0x78, 0xe8, 0x2f, 0x32, 0xa8, 0x0f, 0xc1, 0x70, 0xde, 0xb0, 0xc4, 0xc3,
		0x7f, 0x89, 0xc3, 0x39, 0x04, 0xc3, 0x93, 0xbb, 0xf0, 0xef, 0x7e, 0x25, 0xc3, 0x8a, 0x0e, 0xf7,
		0xdd, 0x25, 0x98, 0x60, 0x9d, 0x4a, 0x3c, 0xfa, 0x73, 0xec, 0xe5, 0x1c, 0x51, 0xbd, 0x00, 0xd9,
		0x84, 0x0e, 0xff, 0x35, 0x06, 0xa5, 0xfa, 0xd5, 0x3a, 0x14, 0x02, 0xdd, 0x49, 0x3c, 0xfc, 0xd7,
		0x19, 0x3c, 0x88, 0xc2, 0xa6, 0xb3, 0xee, 0x24, 0x9e, 0xe0, 0x37, 0xb8, 0xe9, 0x0c, 0x81, 0xdd,
		0xc6, 0x1b, 0x93, 0x78, 0xf4, 0xe7, 0xb9, 0xd7, 0x39, 0xa4, 0xfa, 0x34, 0xe4, 0xfd, 0x62, 0x13,
		0x8f, 0xff, 0x4d, 0x86, 0x1f, 0x60, 0xb0, 0x07, 0x02, 0xc5, 0x2e, 0x9e, 0xe2, 0xb7, 0xb8, 0x07,
		0x02, 0x28, 0xbc, 0x8d, 0xa2, 0x0d, 0x4c, 0x3c, 0xd3, 0x17, 0xf8, 0x36, 0x8a, 0xf4, 0x2f, 0x78,
		0x35, 0x49, 0xce, 0x8f, 0xa7, 0xf8, 0x6d, 0xbe, 0x9a, 0x44, 0x1f, 0x9b, 0x11, 0xed, 0x08, 0xe2,
		0x39, 0x7e, 0x87, 0x9b, 0x11, 0x69, 0x08, 0xaa, 0xdb, 0x20, 0x0d, 0x77, 0x03, 0xf1, 0x7c, 0x5f,
		0x64, 0x7c, 0xd3, 0x43, 0xcd, 0x40, 0xf5, 0x59, 0x98, 0x1b, 0xdd, 0x09, 0xc4, 0xb3, 0x7e, 0xe9,
		0x5e, 0xe4, 0xec, 0x16, 0x6c, 0x04, 0xaa, 0x3b, 0x83, 0x92, 0x12, 0xec, 0x02, 0xe2, 0x69, 0x5f,
		0xbe, 0x17, 0x4e, 0xdc, 0xc1, 0x26, 0xa0, 0x5a, 0x03, 0x18, 0x14, 0xe0, 0x78, 0xae, 0x57, 0x18,
		0x57, 0x00, 0x84, 0xb7, 0x06, 0xab, 0xbf, 0xf1, 0xf8, 0x2f, 0xf3, 0xad, 0xc1, 0x10, 0x78, 0x6b,
		0xf0, 0xd2, 0x1b, 0x8f, 0x7e, 0x95, 0x6f, 0x0d, 0x0e, 0xc1, 0x91, 0x1d, 0xa8, 0x6e, 0xf1, 0x0c,
		0xb7, 0x79, 0x64, 0x07, 0x50, 0xd5, 0x2d, 0x98, 0x1e, 0x2a, 0x88, 0xf1, 0x54, 0x5f, 0x65, 0x54,
		0x62, 0xb4, 0x1e, 0x06, 0x8b, 0x17, 0x2b, 0x86, 0xf1, 0x6c, 0xbf, 0x1f, 0x29, 0x5e, 0xac, 0x16,
		0x56, 0x2f, 0x41, 0xce, 0xec, 0x1b, 0x06, 0xde, 0x3c, 0xd2, 0xfd, 0x7f, 0xc1, 0x57, 0xfe, 0xf7,
		0x77, 0x98, 0x77, 0x38, 0xa0, 0x7a, 0x0e, 0xb2, 0xa8, 0xb7, 0x8b, 0x3a, 0x71, 0xc8, 0xff, 0x78,
		0x87, 0x27, 0x4c, 0xac, 0x5d, 0x7d, 0x1a, 0x80, 0x5e, 0x8d, 0x90, 0xcf, 0x7f, 0x31, 0xd8, 0xff,
		0x7c, 0x87, 0xfd, 0xb6, 0x66, 0x00, 0x19, 0x10, 0xd0, 0x5f, 0xea, 0xdc, 0x9f, 0xe0, 0xed, 0x30,
		0x01, 0x59, 0x91, 0x8b, 0x30, 0x71, 0xd5, 0xb5, 0x4c, 0x4f, 0xed, 0xc6, 0xa1, 0xff, 0x8b, 0xa1,
		0xb9, 0x3e, 0x76, 0x58, 0xcf, 0x72, 0x90, 0xa7, 0x76, 0xdd, 0x38, 0xec, 0x7f, 0x33, 0xac, 0x0f,
		0xc0, 0x60, 0x4d, 0x75, 0xbd, 0x24, 0xf3, 0xfe, 0x1f, 0x0e, 0xe6, 0x00, 0x6c, 0x34, 0xfe, 0xfb,
		0x1a, 0x3a, 0x88, 0xc3, 0xfe, 0x80, 0x1b, 0xcd, 0xf4, 0xab, 0x1f, 0x87, 0x3c, 0xfe, 0x93, 0xfe,
		0x60, 0x2e, 0x06, 0xfc, 0xbf, 0x0c, 0x3c, 0x40, 0xe0, 0x37, 0xbb, 0x5e, 0xc7, 0xd3, 0xe3, 0x9d,
		0xfd, 0x7f, 0x6c, 0xa5, 0xb9, 0x7e, 0xb5, 0x06, 0x05, 0xd7, 0xeb, 0x74, 0xfa, 0xac, 0x3f, 0x8d,
		0x81, 0xff, 0xff, 0x3b, 0xfe, 0x95, 0x85, 0x8f, 0xc1, 0xab, 0x7d, 0xe3, 0x9a, 0x67, 0x5b, 0xe4,
		0x73, 0x47, 0x1c, 0xc3, 0x3d, 0xc6, 0x10, 0x80, 0xe0, 0xd9, 0x5b, 0x3d, 0xdd, 0x43, 0x3d, 0xdb,
		0x8b, 0x75, 0xdd, 0x0f, 0x19, 0x7e, 0x80, 0x58, 0xd9, 0x1c, 0x7d, 0x0b, 0x0c, 0x6b, 0xd6, 0x9a,
		0x45, 0xef, 0x7f, 0x5f, 0x38, 0x95, 0xfc, 0x22, 0x17, 0x5e, 0xca, 0xe1, 0x9a, 0x30, 0x48, 0x91,
		0xec, 0x52, 0xb7, 0x18, 0x94, 0xcd, 0xbf, 0xbb, 0x9b, 0xe1, 0xca, 0x27, 0x41, 0xa8, 0x49, 0x73,
		0x30, 0x4e, 0xa6, 0xf4, 0x13, 0xe4, 0xe6, 0x3b, 0x2d, 0xb3, 0x27, 0xe9, 0x21, 0x10, 0x56, 0xd8,
		0x15, 0xfc, 0xd4, 0x72, 0xc8, 0x82, 0x15, 0x59, 0x58, 0xa9, 0x66, 0xde, 0xb8, 0x7d, 0x62, 0xac,
		0xa2, 0x81, 0xb0, 0x82, 0x35, 0xeb, 0xe4, 0xbb, 0xe8, 0x90, 0x66, 0x5d, 0x16, 0xea, 0x78, 0x78,
		0x95, 0xfd, 0x22, 0x34, 0x32, 0xbc, 0x2a, 0x0b, 0xab, 0xd2, 0x22, 0x08, 0x97, 0xc9, 0xb7, 0xa0,
		0xc2, 0x19, 0x29, 0x3c, 0xdc, 0x34, 0x3a, 0x75, 0x59, 0xb8, 0x5c, 0x79, 0x10, 0x84, 0xd5, 0x80,
		0x99, 0x42, 0xd0, 0xcc, 0xca, 0x17, 0x04, 0x10, 0xea, 0xfe, 0xe8, 0x19, 0xf2, 0x22, 0x81, 0x8d,
		0x9e, 0xf1, 0xe5, 0x4f, 0xb2, 0x0f, 0x1e, 0xec, 0xc9, 0x97, 0x9f, 0x25, 0xf7, 0xf7, 0x5c, 0xff,
		0xac, 0x2f, 0x3f, 0x47, 0x7e, 0x7f, 0x59, 0x64, 0xf2, 0x73, 0xbe, 0xfc, 0x3c, 0xf9, 0x1a, 0xc5,
		0xdf, 0x7e, 0xde, 0x97, 0x5f, 0x20, 0xff, 0xa3, 0x25, 0xc5, 0xe4, 0x17, 0x2a, 0x17, 0x41, 0x68,
		0x87, 0x8c, 0x4a, 0x1f, 0x6a, 0xd4, 0x24, 0x37, 0x8a, 0xb9, 0xf4, 0x19, 0xc8, 0xb4, 0x4d, 0x6b,
		0xf3, 0xc8, 0x68, 0xf1, 0x97, 0x6f, 0x9f, 0x18, 0xfb, 0xfc, 0xed, 0x13, 0x63, 0x5f, 0xb9, 0x7d,
		0x62, 0x8c, 0x30, 0x5d, 0x86, 0x4c, 0xd3, 0xe8, 0x1c, 0xbe, 0xc2, 0x8b, 0x83, 0x15, 0x1e, 0xf6,
		0x7c, 0x60, 0x91, 0xaf, 0x10, 0x9e, 0x15, 0xac, 0xcf, 0xd7, 0x79, 0xe4, 0x4a, 0xd5, 0x13, 0xac,
		0xe5, 0xcf, 0x12, 0xae, 0xfa, 0x61, 0xcb, 0xf9, 0xae, 0x17, 0x32, 0xe9, 0xc2, 0x9c, 0x27, 0xef,
		0x6f, 0x47, 0xde, 0x9f, 0x1f, 0xf9, 0xfe, 0x80, 0xd7, 0x2b, 0x6b, 0x30, 0x81, 0x71, 0xc1, 0x85,
		0x49, 0x08, 0xad, 0x16, 0x83, 0x0b, 0xb3, 0x72, 0xf6, 0xf5, 0x3b, 0x0b, 0x63, 0x6f, 0xdc, 0x59,
		0x18, 0xfb, 0xa7, 0x3b, 0x0b, 0x63, 0x6f, 0xde, 0x59, 0x10, 0x7e, 0x70, 0x67, 0x41, 0xf8, 0xd1,
		0x9d, 0x05, 0xe1, 0xd6, 0xdd, 0x05, 0xe1, 0x6b, 0x77, 0x17, 0x84, 0x6f, 0xdc, 0x5d, 0x10, 0xbe,
		0x7d, 0x77, 0x41, 0x78, 0xfd, 0xee, 0x82, 0xf0, 0xc6, 0xdd, 0x05, 0xe1, 0xcd, 0xbb, 0x0b, 0xc2,
		0x8f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x27, 0x48, 0x15, 0xfc, 0x49, 0x37, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_cockroachdb_gogoproto_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *A) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *A")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *A but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *A but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.B) != len(that1.B) {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", len(this.B), len(that1.B))
	}
	for i := range this.B {
		if !this.B[i].Equal(that1.B[i]) {
			return fmt.Errorf("B this[%v](%v) Not Equal that[%v](%v)", i, this.B[i], i, that1.B[i])
		}
	}
	return nil
}
func (this *A) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.B) != len(that1.B) {
		return false
	}
	for i := range this.B {
		if !this.B[i].Equal(that1.B[i]) {
			return false
		}
	}
	return true
}
func (this *B) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*B)
	if !ok {
		that2, ok := that.(B)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *B")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *B but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *B but is not nil && this == nil")
	}
	if !this.C.Equal(that1.C) {
		return fmt.Errorf("C this(%v) Not Equal that(%v)", this.C, that1.C)
	}
	if !this.D.Equal(that1.D) {
		return fmt.Errorf("D this(%v) Not Equal that(%v)", this.D, that1.D)
	}
	if !this.F.Equal(that1.F) {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*B)
	if !ok {
		that2, ok := that.(B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.C.Equal(that1.C) {
		return false
	}
	if !this.D.Equal(that1.D) {
		return false
	}
	if !this.F.Equal(that1.F) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *D) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*D)
	if !ok {
		that2, ok := that.(D)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *D")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *D but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *D but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *D) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*D)
	if !ok {
		that2, ok := that.(D)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *C) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*C)
	if !ok {
		that2, ok := that.(C)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *C")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *C but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *C but is not nil && this == nil")
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", *this.Field2, *that1.Field2)
		}
	} else if this.Field2 != nil {
		return fmt.Errorf("this.Field2 == nil && that.Field2 != nil")
	} else if that1.Field2 != nil {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", *this.Field3, *that1.Field3)
		}
	} else if this.Field3 != nil {
		return fmt.Errorf("this.Field3 == nil && that.Field3 != nil")
	} else if that1.Field3 != nil {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	if this.Field4 != nil && that1.Field4 != nil {
		if *this.Field4 != *that1.Field4 {
			return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", *this.Field4, *that1.Field4)
		}
	} else if this.Field4 != nil {
		return fmt.Errorf("this.Field4 == nil && that.Field4 != nil")
	} else if that1.Field4 != nil {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this.Field4, that1.Field4)
	}
	if len(this.Field5) != len(that1.Field5) {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", len(this.Field5), len(that1.Field5))
	}
	for i := range this.Field5 {
		if !bytes.Equal(this.Field5[i], that1.Field5[i]) {
			return fmt.Errorf("Field5 this[%v](%v) Not Equal that[%v](%v)", i, this.Field5[i], i, that1.Field5[i])
		}
	}
	if this.Field6 != nil && that1.Field6 != nil {
		if *this.Field6 != *that1.Field6 {
			return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", *this.Field6, *that1.Field6)
		}
	} else if this.Field6 != nil {
		return fmt.Errorf("this.Field6 == nil && that.Field6 != nil")
	} else if that1.Field6 != nil {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	if len(this.Field7) != len(that1.Field7) {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", len(this.Field7), len(that1.Field7))
	}
	for i := range this.Field7 {
		if this.Field7[i] != that1.Field7[i] {
			return fmt.Errorf("Field7 this[%v](%v) Not Equal that[%v](%v)", i, this.Field7[i], i, that1.Field7[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *C) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C)
	if !ok {
		that2, ok := that.(C)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return false
		}
	} else if this.Field3 != nil {
		return false
	} else if that1.Field3 != nil {
		return false
	}
	if this.Field4 != nil && that1.Field4 != nil {
		if *this.Field4 != *that1.Field4 {
			return false
		}
	} else if this.Field4 != nil {
		return false
	} else if that1.Field4 != nil {
		return false
	}
	if len(this.Field5) != len(that1.Field5) {
		return false
	}
	for i := range this.Field5 {
		if !bytes.Equal(this.Field5[i], that1.Field5[i]) {
			return false
		}
	}
	if this.Field6 != nil && that1.Field6 != nil {
		if *this.Field6 != *that1.Field6 {
			return false
		}
	} else if this.Field6 != nil {
		return false
	} else if that1.Field6 != nil {
		return false
	}
	if len(this.Field7) != len(that1.Field7) {
		return false
	}
	for i := range this.Field7 {
		if this.Field7[i] != that1.Field7[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *U) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*U)
	if !ok {
		that2, ok := that.(U)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *U")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *U but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *U but is not nil && this == nil")
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", *this.Field3, *that1.Field3)
		}
	} else if this.Field3 != nil {
		return fmt.Errorf("this.Field3 == nil && that.Field3 != nil")
	} else if that1.Field3 != nil {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *U) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*U)
	if !ok {
		that2, ok := that.(U)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return false
		}
	} else if this.Field3 != nil {
		return false
	} else if that1.Field3 != nil {
		return false
	}
	return true
}
func (this *UnoM) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UnoM)
	if !ok {
		that2, ok := that.(UnoM)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UnoM")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UnoM but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UnoM but is not nil && this == nil")
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", *this.Field3, *that1.Field3)
		}
	} else if this.Field3 != nil {
		return fmt.Errorf("this.Field3 == nil && that.Field3 != nil")
	} else if that1.Field3 != nil {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *UnoM) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnoM)
	if !ok {
		that2, ok := that.(UnoM)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return false
		}
	} else if this.Field3 != nil {
		return false
	} else if that1.Field3 != nil {
		return false
	}
	return true
}
func (this *OldA) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldA)
	if !ok {
		that2, ok := that.(OldA)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldA")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldA but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldA but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.B) != len(that1.B) {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", len(this.B), len(that1.B))
	}
	for i := range this.B {
		if !this.B[i].Equal(that1.B[i]) {
			return fmt.Errorf("B this[%v](%v) Not Equal that[%v](%v)", i, this.B[i], i, that1.B[i])
		}
	}
	return nil
}
func (this *OldA) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OldA)
	if !ok {
		that2, ok := that.(OldA)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.B) != len(that1.B) {
		return false
	}
	for i := range this.B {
		if !this.B[i].Equal(that1.B[i]) {
			return false
		}
	}
	return true
}
func (this *OldB) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldB)
	if !ok {
		that2, ok := that.(OldB)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldB")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldB but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldB but is not nil && this == nil")
	}
	if !this.C.Equal(that1.C) {
		return fmt.Errorf("C this(%v) Not Equal that(%v)", this.C, that1.C)
	}
	if !this.F.Equal(that1.F) {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldB) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OldB)
	if !ok {
		that2, ok := that.(OldB)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.C.Equal(that1.C) {
		return false
	}
	if !this.F.Equal(that1.F) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldC) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldC)
	if !ok {
		that2, ok := that.(OldC)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldC")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldC but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldC but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", *this.Field2, *that1.Field2)
		}
	} else if this.Field2 != nil {
		return fmt.Errorf("this.Field2 == nil && that.Field2 != nil")
	} else if that1.Field2 != nil {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", *this.Field3, *that1.Field3)
		}
	} else if this.Field3 != nil {
		return fmt.Errorf("this.Field3 == nil && that.Field3 != nil")
	} else if that1.Field3 != nil {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	if this.Field6 != nil && that1.Field6 != nil {
		if *this.Field6 != *that1.Field6 {
			return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", *this.Field6, *that1.Field6)
		}
	} else if this.Field6 != nil {
		return fmt.Errorf("this.Field6 == nil && that.Field6 != nil")
	} else if that1.Field6 != nil {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	if len(this.Field7) != len(that1.Field7) {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", len(this.Field7), len(that1.Field7))
	}
	for i := range this.Field7 {
		if this.Field7[i] != that1.Field7[i] {
			return fmt.Errorf("Field7 this[%v](%v) Not Equal that[%v](%v)", i, this.Field7[i], i, that1.Field7[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OldC)
	if !ok {
		that2, ok := that.(OldC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return false
		}
	} else if this.Field3 != nil {
		return false
	} else if that1.Field3 != nil {
		return false
	}
	if this.Field6 != nil && that1.Field6 != nil {
		if *this.Field6 != *that1.Field6 {
			return false
		}
	} else if this.Field6 != nil {
		return false
	} else if that1.Field6 != nil {
		return false
	}
	if len(this.Field7) != len(that1.Field7) {
		return false
	}
	for i := range this.Field7 {
		if this.Field7[i] != that1.Field7[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldU) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldU)
	if !ok {
		that2, ok := that.(OldU)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldU")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldU but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldU but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldU) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OldU)
	if !ok {
		that2, ok := that.(OldU)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldUnoM) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldUnoM)
	if !ok {
		that2, ok := that.(OldUnoM)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldUnoM")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldUnoM but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldUnoM but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldUnoM) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OldUnoM)
	if !ok {
		that2, ok := that.(OldUnoM)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.A{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "int64")+",\n")
	}
	if this.B != nil {
		s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&unrecognized.B{")
	if this.C != nil {
		s = append(s, "C: "+fmt.Sprintf("%#v", this.C)+",\n")
	}
	if this.D != nil {
		s = append(s, "D: "+fmt.Sprintf("%#v", this.D)+",\n")
	}
	if this.F != nil {
		s = append(s, "F: "+fmt.Sprintf("%#v", this.F)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *D) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&unrecognized.D{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&unrecognized.C{")
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringUnrecognized(this.Field2, "float64")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringUnrecognized(this.Field3, "string")+",\n")
	}
	if this.Field4 != nil {
		s = append(s, "Field4: "+valueToGoStringUnrecognized(this.Field4, "float64")+",\n")
	}
	if this.Field5 != nil {
		s = append(s, "Field5: "+fmt.Sprintf("%#v", this.Field5)+",\n")
	}
	if this.Field6 != nil {
		s = append(s, "Field6: "+valueToGoStringUnrecognized(this.Field6, "int64")+",\n")
	}
	if this.Field7 != nil {
		s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *U) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.U{")
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringUnrecognized(this.Field3, "uint32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnoM) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.UnoM{")
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringUnrecognized(this.Field3, "uint32")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldA) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.OldA{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "int64")+",\n")
	}
	if this.B != nil {
		s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldB) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.OldB{")
	if this.C != nil {
		s = append(s, "C: "+fmt.Sprintf("%#v", this.C)+",\n")
	}
	if this.F != nil {
		s = append(s, "F: "+fmt.Sprintf("%#v", this.F)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&unrecognized.OldC{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringUnrecognized(this.Field2, "float64")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringUnrecognized(this.Field3, "string")+",\n")
	}
	if this.Field6 != nil {
		s = append(s, "Field6: "+valueToGoStringUnrecognized(this.Field6, "int64")+",\n")
	}
	if this.Field7 != nil {
		s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldU) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.OldU{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "string")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldUnoM) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognized.OldUnoM{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognized(this.Field1, "string")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUnrecognized(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *A) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field1 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field1))
		i--
		dAtA[i] = 0x10
	}
	if len(m.B) > 0 {
		for iNdEx := len(m.B) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.B[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUnrecognized(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *B) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.F != nil {
		{
			size, err := m.F.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUnrecognized(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.D != nil {
		{
			size, err := m.D.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUnrecognized(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.C != nil {
		{
			size, err := m.C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUnrecognized(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *D) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Field1 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Field7) > 0 {
		for iNdEx := len(m.Field7) - 1; iNdEx >= 0; iNdEx-- {
			f4 := math.Float32bits(float32(m.Field7[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f4))
			i--
			dAtA[i] = 0x3d
		}
	}
	if m.Field6 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field6))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Field5) > 0 {
		for iNdEx := len(m.Field5) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field5[iNdEx])
			copy(dAtA[i:], m.Field5[iNdEx])
			i = encodeVarintUnrecognized(dAtA, i, uint64(len(m.Field5[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Field4 != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Field4))))
		i--
		dAtA[i] = 0x21
	}
	if m.Field3 != nil {
		i -= len(*m.Field3)
		copy(dAtA[i:], *m.Field3)
		i = encodeVarintUnrecognized(dAtA, i, uint64(len(*m.Field3)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Field2 != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Field2))))
		i--
		dAtA[i] = 0x11
	}
	return len(dAtA) - i, nil
}

func (m *U) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *U) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *U) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field3 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field3))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Field2) > 0 {
		for iNdEx := len(m.Field2) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.Field2[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
			i--
			dAtA[i] = 0x11
		}
	}
	return len(dAtA) - i, nil
}

func (m *OldA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field1 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field1))
		i--
		dAtA[i] = 0x10
	}
	if len(m.B) > 0 {
		for iNdEx := len(m.B) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.B[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUnrecognized(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OldB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.F != nil {
		{
			size, err := m.F.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUnrecognized(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.C != nil {
		{
			size, err := m.C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUnrecognized(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OldC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Field7) > 0 {
		for iNdEx := len(m.Field7) - 1; iNdEx >= 0; iNdEx-- {
			f8 := math.Float32bits(float32(m.Field7[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f8))
			i--
			dAtA[i] = 0x3d
		}
	}
	if m.Field6 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field6))
		i--
		dAtA[i] = 0x30
	}
	if m.Field3 != nil {
		i -= len(*m.Field3)
		copy(dAtA[i:], *m.Field3)
		i = encodeVarintUnrecognized(dAtA, i, uint64(len(*m.Field3)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Field2 != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Field2))))
		i--
		dAtA[i] = 0x11
	}
	if m.Field1 != nil {
		i = encodeVarintUnrecognized(dAtA, i, uint64(*m.Field1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OldU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Field2) > 0 {
		for iNdEx := len(m.Field2) - 1; iNdEx >= 0; iNdEx-- {
			f9 := math.Float64bits(float64(m.Field2[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f9))
			i--
			dAtA[i] = 0x11
		}
	}
	if m.Field1 != nil {
		i -= len(*m.Field1)
		copy(dAtA[i:], *m.Field1)
		i = encodeVarintUnrecognized(dAtA, i, uint64(len(*m.Field1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUnrecognized(dAtA []byte, offset int, v uint64) int {
	offset -= sovUnrecognized(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedA(r randyUnrecognized, easy bool) *A {
	this := &A{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.B = make([]*B, v1)
		for i := 0; i < v1; i++ {
			this.B[i] = NewPopulatedB(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v2 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Field1 = &v2
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedB(r randyUnrecognized, easy bool) *B {
	this := &B{}
	if r.Intn(5) != 0 {
		this.C = NewPopulatedC(r, easy)
	}
	if r.Intn(5) != 0 {
		this.D = NewPopulatedD(r, easy)
	}
	if r.Intn(5) != 0 {
		this.F = NewPopulatedOldC(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 6)
	}
	return this
}

func NewPopulatedD(r randyUnrecognized, easy bool) *D {
	this := &D{}
	if r.Intn(5) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Field1 = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 2)
	}
	return this
}

func NewPopulatedC(r randyUnrecognized, easy bool) *C {
	this := &C{}
	if r.Intn(5) != 0 {
		v4 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field2 = &v4
	}
	if r.Intn(5) != 0 {
		v5 := string(randStringUnrecognized(r))
		this.Field3 = &v5
	}
	if r.Intn(5) != 0 {
		v6 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Field4 = &v6
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(10)
		this.Field5 = make([][]byte, v7)
		for i := 0; i < v7; i++ {
			v8 := r.Intn(100)
			this.Field5[i] = make([]byte, v8)
			for j := 0; j < v8; j++ {
				this.Field5[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(5) != 0 {
		v9 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.Field6 = &v9
	}
	if r.Intn(5) != 0 {
		v10 := r.Intn(10)
		this.Field7 = make([]float32, v10)
		for i := 0; i < v10; i++ {
			this.Field7[i] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.Field7[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 8)
	}
	return this
}

func NewPopulatedU(r randyUnrecognized, easy bool) *U {
	this := &U{}
	if r.Intn(5) != 0 {
		v11 := r.Intn(10)
		this.Field2 = make([]float64, v11)
		for i := 0; i < v11; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if r.Intn(5) != 0 {
		v12 := uint32(r.Uint32())
		this.Field3 = &v12
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnoM(r randyUnrecognized, easy bool) *UnoM {
	this := &UnoM{}
	if r.Intn(5) != 0 {
		v13 := r.Intn(10)
		this.Field2 = make([]float64, v13)
		for i := 0; i < v13; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if r.Intn(5) != 0 {
		v14 := uint32(r.Uint32())
		this.Field3 = &v14
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOldA(r randyUnrecognized, easy bool) *OldA {
	this := &OldA{}
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.B = make([]*OldB, v15)
		for i := 0; i < v15; i++ {
			this.B[i] = NewPopulatedOldB(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.Field1 = &v16
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOldB(r randyUnrecognized, easy bool) *OldB {
	this := &OldB{}
	if r.Intn(5) != 0 {
		this.C = NewPopulatedOldC(r, easy)
	}
	if r.Intn(5) != 0 {
		this.F = NewPopulatedOldC(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 6)
	}
	return this
}

func NewPopulatedOldC(r randyUnrecognized, easy bool) *OldC {
	this := &OldC{}
	if r.Intn(5) != 0 {
		v17 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		this.Field1 = &v17
	}
	if r.Intn(5) != 0 {
		v18 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		this.Field2 = &v18
	}
	if r.Intn(5) != 0 {
		v19 := string(randStringUnrecognized(r))
		this.Field3 = &v19
	}
	if r.Intn(5) != 0 {
		v20 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.Field6 = &v20
	}
	if r.Intn(5) != 0 {
		v21 := r.Intn(10)
		this.Field7 = make([]float32, v21)
		for i := 0; i < v21; i++ {
			this.Field7[i] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.Field7[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 8)
	}
	return this
}

func NewPopulatedOldU(r randyUnrecognized, easy bool) *OldU {
	this := &OldU{}
	if r.Intn(5) != 0 {
		v22 := string(randStringUnrecognized(r))
		this.Field1 = &v22
	}
	if r.Intn(5) != 0 {
		v23 := r.Intn(10)
		this.Field2 = make([]float64, v23)
		for i := 0; i < v23; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 3)
	}
	return this
}

func NewPopulatedOldUnoM(r randyUnrecognized, easy bool) *OldUnoM {
	this := &OldUnoM{}
	if r.Intn(5) != 0 {
		v24 := string(randStringUnrecognized(r))
		this.Field1 = &v24
	}
	if r.Intn(5) != 0 {
		v25 := r.Intn(10)
		this.Field2 = make([]float64, v25)
		for i := 0; i < v25; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognized(r, 3)
	}
	return this
}

type randyUnrecognized interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUnrecognized(r randyUnrecognized) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUnrecognized(r randyUnrecognized) string {
	v26 := r.Intn(100)
	tmps := make([]rune, v26)
	for i := 0; i < v26; i++ {
		tmps[i] = randUTF8RuneUnrecognized(r)
	}
	return string(tmps)
}
func randUnrecognizedUnrecognized(r randyUnrecognized, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUnrecognized(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUnrecognized(dAtA []byte, r randyUnrecognized, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(key))
		v27 := r.Int63()
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(v27))
	case 1:
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUnrecognized(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUnrecognized(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.B) > 0 {
		for _, e := range m.B {
			l = e.Size()
			n += 1 + l + sovUnrecognized(uint64(l))
		}
	}
	if m.Field1 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field1))
	}
	return n
}

func (m *B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.D != nil {
		l = m.D.Size()
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.F != nil {
		l = m.F.Size()
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *D) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field2 != nil {
		n += 9
	}
	if m.Field3 != nil {
		l = len(*m.Field3)
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.Field4 != nil {
		n += 9
	}
	if len(m.Field5) > 0 {
		for _, b := range m.Field5 {
			l = len(b)
			n += 1 + l + sovUnrecognized(uint64(l))
		}
	}
	if m.Field6 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field6))
	}
	if len(m.Field7) > 0 {
		n += 5 * len(m.Field7)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *U) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Field2) > 0 {
		n += 9 * len(m.Field2)
	}
	if m.Field3 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field3))
	}
	return n
}

func (m *OldA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.B) > 0 {
		for _, e := range m.B {
			l = e.Size()
			n += 1 + l + sovUnrecognized(uint64(l))
		}
	}
	if m.Field1 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field1))
	}
	return n
}

func (m *OldB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.F != nil {
		l = m.F.Size()
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OldC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field1))
	}
	if m.Field2 != nil {
		n += 9
	}
	if m.Field3 != nil {
		l = len(*m.Field3)
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if m.Field6 != nil {
		n += 1 + sovUnrecognized(uint64(*m.Field6))
	}
	if len(m.Field7) > 0 {
		n += 5 * len(m.Field7)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OldU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != nil {
		l = len(*m.Field1)
		n += 1 + l + sovUnrecognized(uint64(l))
	}
	if len(m.Field2) > 0 {
		n += 9 * len(m.Field2)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUnrecognized(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUnrecognized(x uint64) (n int) {
	return sovUnrecognized(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *A) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForB := "[]*B{"
	for _, f := range this.B {
		repeatedStringForB += strings.Replace(f.String(), "B", "B", 1) + ","
	}
	repeatedStringForB += "}"
	s := strings.Join([]string{`&A{`,
		`B:` + repeatedStringForB + `,`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&B{`,
		`C:` + strings.Replace(this.C.String(), "C", "C", 1) + `,`,
		`D:` + strings.Replace(this.D.String(), "D", "D", 1) + `,`,
		`F:` + strings.Replace(this.F.String(), "OldC", "OldC", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *D) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&D{`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C{`,
		`Field2:` + valueToStringUnrecognized(this.Field2) + `,`,
		`Field3:` + valueToStringUnrecognized(this.Field3) + `,`,
		`Field4:` + valueToStringUnrecognized(this.Field4) + `,`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`Field6:` + valueToStringUnrecognized(this.Field6) + `,`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *U) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&U{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Field3:` + valueToStringUnrecognized(this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnoM) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnoM{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Field3:` + valueToStringUnrecognized(this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldA) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForB := "[]*OldB{"
	for _, f := range this.B {
		repeatedStringForB += strings.Replace(f.String(), "OldB", "OldB", 1) + ","
	}
	repeatedStringForB += "}"
	s := strings.Join([]string{`&OldA{`,
		`B:` + repeatedStringForB + `,`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldB) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldB{`,
		`C:` + strings.Replace(this.C.String(), "OldC", "OldC", 1) + `,`,
		`F:` + strings.Replace(this.F.String(), "OldC", "OldC", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldC{`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`Field2:` + valueToStringUnrecognized(this.Field2) + `,`,
		`Field3:` + valueToStringUnrecognized(this.Field3) + `,`,
		`Field6:` + valueToStringUnrecognized(this.Field6) + `,`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldU) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldU{`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldUnoM) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldUnoM{`,
		`Field1:` + valueToStringUnrecognized(this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUnrecognized(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *A) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B, &B{})
			if err := m.B[len(m.B)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field1 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *B) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: B: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: B: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C == nil {
				m.C = &C{}
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.D == nil {
				m.D = &D{}
			}
			if err := m.D.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F == nil {
				m.F = &OldC{}
			}
			if err := m.F.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field1 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Field2 = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Field3 = &s
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Field4 = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field5 = append(m.Field5, make([]byte, postIndex-iNdEx))
			copy(m.Field5[len(m.Field5)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field6 = &v
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Field7 = append(m.Field7, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUnrecognized
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUnrecognized
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUnrecognized
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Field7) == 0 {
					m.Field7 = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Field7 = append(m.Field7, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *U) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: U: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: U: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Field2 = append(m.Field2, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUnrecognized
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUnrecognized
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUnrecognized
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Field2) == 0 {
					m.Field2 = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Field2 = append(m.Field2, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field3 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B, &OldB{})
			if err := m.B[len(m.B)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field1 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C == nil {
				m.C = &OldC{}
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F == nil {
				m.F = &OldC{}
			}
			if err := m.F.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field1 = &v
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Field2 = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Field3 = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field6 = &v
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Field7 = append(m.Field7, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUnrecognized
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUnrecognized
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUnrecognized
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Field7) == 0 {
					m.Field7 = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Field7 = append(m.Field7, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnrecognized
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Field1 = &s
			iNdEx = postIndex
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Field2 = append(m.Field2, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUnrecognized
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUnrecognized
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUnrecognized
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Field2) == 0 {
					m.Field2 = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Field2 = append(m.Field2, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognized(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnrecognized
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnrecognized(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnrecognized
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnrecognized
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUnrecognized
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUnrecognized
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUnrecognized
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUnrecognized        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnrecognized          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUnrecognized = fmt.Errorf("proto: unexpected end of group")
)
